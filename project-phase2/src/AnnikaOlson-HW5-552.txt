// pc_control.v

module PC_control(input [2:0] C, input [8:0] I, input [2:0] F, input [15:0] PC_in, output [15:0] PC_out);
    ////////////////////////////
    // Intermediate Variables //
    ////////////////////////////
    wire [15:0] branch_imm_sign_ext;
    wire [15:0] branch_imm;
    wire [15:0] next_pc, b_pc;
    wire Z_flag, V_flag, N_flag;
    reg Branch;

    wire error;

    // C: 3-bit condition
    // I: 9-bit signed offset in 2's complement, right shifted by one
    // Target = PC + 2 + ('I' << 1)
    // F: flag register, {Z, V, N}
    assign branch_imm_sign_ext = {{7{I[8]}}, I}; // sign extend immediate
    assign branch_imm = branch_imm_sign_ext << 1; // shift sign extended immediate left by one

    CLA_16bit cla_b_pc(.A(PC_in), .B(16'h0002), .S(next_pc), .Cout(cout), .Sub(1'b0), .Ovfl(error)); // calculate new pc (pc + 2)
    CLA_16bit cla_branch(.A(new_pc), .B(branch_imm), .S(b_pc), .Cout(cout), .Sub(1'b0), .Ovfl(error));  // calculate new branch addr (imm << 1 + pc + 2)

    // assign each component of the flag
    assign Z_flag = F[2];
    assign V_flag = F[1];
    assign N_flag = F[0];

    always@(*) begin
		case (C)
            3'b000 : assign Branch = ~Z_flag; // Not equal, Z = 0
            3'b001 : assign Branch = Z_flag; // Equal, Z = 1
            3'b010 : assign Branch = ~Z_flag & ~N_flag; // Greater than, Z = N = 0
            3'b011 : assign Branch = N_flag; // Less than, N = 1
            3'b100 : assign Branch = (Z_flag | (~Z_flag & ~N_flag)); // Greater than or equal, Z = 1 or Z = N = 0
            3'b101 : assign Branch = N_flag | Z_flag; // Less than or equal, N = 1 or Z = 1
            3'b110 : assign Branch = V_flag; // Overflow, V = 1
            3'b111 : assign Branch = 1'b1; // Unconditional
            default: $error("Invalid branch case.");
        endcase
    end

    assign PC_out = Branch ? b_pc : next_pc;

endmodule


// CLA_16bit.v

module CLA_16bit(A, B, S, Cout, Sub, Ovfl);
    input [15:0] A, B;
    input Sub;
    output [15:0] S;
    output Cout;
    output Ovfl;

    wire C0, C1, C2;
    wire overflow_pos, overflow_neg;
    wire [15:0] new_B;
    wire [15:0] Sum;

    assign new_B = Sub ? ~B : B;

    CLA_4bit add3_0(.A(A[3:0]), .B(new_B[3:0]), .Cin(Sub), .S(Sum[3:0]), .Cout(C0));
    CLA_4bit add7_4(.A(A[7:4]), .B(new_B[7:4]), .Cin(C0), .S(Sum[7:4]), .Cout(C1));
    CLA_4bit add11_8(.A(A[11:8]), .B(new_B[11:8]), .Cin(C1), .S(Sum[11:8]), .Cout(C2));
    CLA_4bit add15_12(.A(A[15:12]), .B(new_B[15:12]), .Cin(C2), .S(Sum[15:12]), .Cout(Cout));

    //////////////////////////////////////////////////////////////////
    // saturation: if there is overflow, then the sum should be     //
    // saturated - if the result is more positive than the most     //
    // positive number (2^15 - 1), then the result should be        //
    // saturated to (2^15 - 1); if the result is smaller than the   //
    // most negative number (-2^15), then the result should be      //
    // saturated to (-2^15).                                        //
    // this should be done on 16 bits, so the logic will not be in  //
    // the CLA_4bit.v. it should be done once we get the 16-bit     //
    // result.                                                      //
    //////////////////////////////////////////////////////////////////
    assign overflow_pos = (~Sub & ~A[15] & ~B[15] & Sum[15]) | (Sub & ~A[15] & B[15] & Sum[15]);
    assign overflow_neg = (~Sub & A[15] & B[15] & ~Sum[15]) | (Sub & A[15] & ~B[15] & ~Sum[15]);
    assign Ovfl = overflow_pos | overflow_neg;

    assign S = overflow_pos ? 16'h7FFF :
                overflow_neg ? 16'h8000 :
                Sum;

endmodule



// CLA_4bit.v

//4-bit carry lookahead adder
module CLA_4bit(A, B, Cin, S, Cout);

    input [3:0] A, B;
    input Cin;
    output [3:0] S;
    output Cout;

    wire [3:0] P, G;    // propagation and generation logic
    wire [4:0] C;       // carry logic

    // level 1
    assign P = A ^ B;
    assign G = A & B;

    // second level
    assign C[0] = Cin;
    assign C[1] = G[0] | (P[0] & Cin);
    assign C[2] = G[1] | (P[1] & G[0]) | (P[1] & P[0] & Cin);
    assign C[3] = G[2] | (P[2] & G[1]) | (P[2] & P[1] & G[0]) | (P[2] & P[1] & P[0] & Cin);
    assign C[4] = G[3] | (P[3] & G[2]) | (P[3] & P[2] & G[1]) | 
            (P[3] & P[2] & P[1] & G[0]) | (P[3] & P[2] & P[1] & P[0] & Cin);

    // third level
    assign S = P ^ C[3:0];
    assign Cout = C[4];

endmodule