$date
	Mon Mar  4 12:46:07 2024
$end
$version
	Questa Intel Starter FPGA Edition Version 2021.2
$end
$timescale
	1ns
$end

$scope module cpu_tb $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [3] $end
$var wire 1 C WriteRegister [2] $end
$var wire 1 D WriteRegister [1] $end
$var wire 1 E WriteRegister [0] $end
$var wire 1 F WriteData [15] $end
$var wire 1 G WriteData [14] $end
$var wire 1 H WriteData [13] $end
$var wire 1 I WriteData [12] $end
$var wire 1 J WriteData [11] $end
$var wire 1 K WriteData [10] $end
$var wire 1 L WriteData [9] $end
$var wire 1 M WriteData [8] $end
$var wire 1 N WriteData [7] $end
$var wire 1 O WriteData [6] $end
$var wire 1 P WriteData [5] $end
$var wire 1 Q WriteData [4] $end
$var wire 1 R WriteData [3] $end
$var wire 1 S WriteData [2] $end
$var wire 1 T WriteData [1] $end
$var wire 1 U WriteData [0] $end
$var wire 1 V MemWrite $end
$var wire 1 W MemRead $end
$var wire 1 X MemAddress [15] $end
$var wire 1 Y MemAddress [14] $end
$var wire 1 Z MemAddress [13] $end
$var wire 1 [ MemAddress [12] $end
$var wire 1 \ MemAddress [11] $end
$var wire 1 ] MemAddress [10] $end
$var wire 1 ^ MemAddress [9] $end
$var wire 1 _ MemAddress [8] $end
$var wire 1 ` MemAddress [7] $end
$var wire 1 a MemAddress [6] $end
$var wire 1 b MemAddress [5] $end
$var wire 1 c MemAddress [4] $end
$var wire 1 d MemAddress [3] $end
$var wire 1 e MemAddress [2] $end
$var wire 1 f MemAddress [1] $end
$var wire 1 g MemAddress [0] $end
$var wire 1 h MemData [15] $end
$var wire 1 i MemData [14] $end
$var wire 1 j MemData [13] $end
$var wire 1 k MemData [12] $end
$var wire 1 l MemData [11] $end
$var wire 1 m MemData [10] $end
$var wire 1 n MemData [9] $end
$var wire 1 o MemData [8] $end
$var wire 1 p MemData [7] $end
$var wire 1 q MemData [6] $end
$var wire 1 r MemData [5] $end
$var wire 1 s MemData [4] $end
$var wire 1 t MemData [3] $end
$var wire 1 u MemData [2] $end
$var wire 1 v MemData [1] $end
$var wire 1 w MemData [0] $end
$var wire 1 x Halt $end
$var integer 32 y inst_count $end
$var integer 32 z cycle_count $end
$var integer 32 { trace_file $end
$var integer 32 | sim_log_file $end
$var reg 1 } clk $end
$var reg 1 ~ rst_n $end

$scope module DUT $end
$var wire 1 !! clk $end
$var wire 1 "! rst_n $end
$var reg 1 #! hlt $end
$var reg 16 $! pc [15:0] $end
$var wire 1 %! ALU_A [15] $end
$var wire 1 &! ALU_A [14] $end
$var wire 1 '! ALU_A [13] $end
$var wire 1 (! ALU_A [12] $end
$var wire 1 )! ALU_A [11] $end
$var wire 1 *! ALU_A [10] $end
$var wire 1 +! ALU_A [9] $end
$var wire 1 ,! ALU_A [8] $end
$var wire 1 -! ALU_A [7] $end
$var wire 1 .! ALU_A [6] $end
$var wire 1 /! ALU_A [5] $end
$var wire 1 0! ALU_A [4] $end
$var wire 1 1! ALU_A [3] $end
$var wire 1 2! ALU_A [2] $end
$var wire 1 3! ALU_A [1] $end
$var wire 1 4! ALU_A [0] $end
$var wire 1 5! ALU_B [15] $end
$var wire 1 6! ALU_B [14] $end
$var wire 1 7! ALU_B [13] $end
$var wire 1 8! ALU_B [12] $end
$var wire 1 9! ALU_B [11] $end
$var wire 1 :! ALU_B [10] $end
$var wire 1 ;! ALU_B [9] $end
$var wire 1 <! ALU_B [8] $end
$var wire 1 =! ALU_B [7] $end
$var wire 1 >! ALU_B [6] $end
$var wire 1 ?! ALU_B [5] $end
$var wire 1 @! ALU_B [4] $end
$var wire 1 A! ALU_B [3] $end
$var wire 1 B! ALU_B [2] $end
$var wire 1 C! ALU_B [1] $end
$var wire 1 D! ALU_B [0] $end
$var wire 1 E! opcode [3] $end
$var wire 1 F! opcode [2] $end
$var wire 1 G! opcode [1] $end
$var wire 1 H! opcode [0] $end
$var wire 1 I! instruction [15] $end
$var wire 1 J! instruction [14] $end
$var wire 1 K! instruction [13] $end
$var wire 1 L! instruction [12] $end
$var wire 1 M! instruction [11] $end
$var wire 1 N! instruction [10] $end
$var wire 1 O! instruction [9] $end
$var wire 1 P! instruction [8] $end
$var wire 1 Q! instruction [7] $end
$var wire 1 R! instruction [6] $end
$var wire 1 S! instruction [5] $end
$var wire 1 T! instruction [4] $end
$var wire 1 U! instruction [3] $end
$var wire 1 V! instruction [2] $end
$var wire 1 W! instruction [1] $end
$var wire 1 X! instruction [0] $end
$var wire 1 Y! ALU_Out [15] $end
$var wire 1 Z! ALU_Out [14] $end
$var wire 1 [! ALU_Out [13] $end
$var wire 1 \! ALU_Out [12] $end
$var wire 1 ]! ALU_Out [11] $end
$var wire 1 ^! ALU_Out [10] $end
$var wire 1 _! ALU_Out [9] $end
$var wire 1 `! ALU_Out [8] $end
$var wire 1 a! ALU_Out [7] $end
$var wire 1 b! ALU_Out [6] $end
$var wire 1 c! ALU_Out [5] $end
$var wire 1 d! ALU_Out [4] $end
$var wire 1 e! ALU_Out [3] $end
$var wire 1 f! ALU_Out [2] $end
$var wire 1 g! ALU_Out [1] $end
$var wire 1 h! ALU_Out [0] $end
$var wire 1 i! read_reg_1 [3] $end
$var wire 1 j! read_reg_1 [2] $end
$var wire 1 k! read_reg_1 [1] $end
$var wire 1 l! read_reg_1 [0] $end
$var wire 1 m! read_reg_2 [3] $end
$var wire 1 n! read_reg_2 [2] $end
$var wire 1 o! read_reg_2 [1] $end
$var wire 1 p! read_reg_2 [0] $end
$var wire 1 q! write_reg [3] $end
$var wire 1 r! write_reg [2] $end
$var wire 1 s! write_reg [1] $end
$var wire 1 t! write_reg [0] $end
$var wire 1 u! read_data_1 [15] $end
$var wire 1 v! read_data_1 [14] $end
$var wire 1 w! read_data_1 [13] $end
$var wire 1 x! read_data_1 [12] $end
$var wire 1 y! read_data_1 [11] $end
$var wire 1 z! read_data_1 [10] $end
$var wire 1 {! read_data_1 [9] $end
$var wire 1 |! read_data_1 [8] $end
$var wire 1 }! read_data_1 [7] $end
$var wire 1 ~! read_data_1 [6] $end
$var wire 1 !" read_data_1 [5] $end
$var wire 1 "" read_data_1 [4] $end
$var wire 1 #" read_data_1 [3] $end
$var wire 1 $" read_data_1 [2] $end
$var wire 1 %" read_data_1 [1] $end
$var wire 1 &" read_data_1 [0] $end
$var wire 1 '" read_data_2 [15] $end
$var wire 1 (" read_data_2 [14] $end
$var wire 1 )" read_data_2 [13] $end
$var wire 1 *" read_data_2 [12] $end
$var wire 1 +" read_data_2 [11] $end
$var wire 1 ," read_data_2 [10] $end
$var wire 1 -" read_data_2 [9] $end
$var wire 1 ." read_data_2 [8] $end
$var wire 1 /" read_data_2 [7] $end
$var wire 1 0" read_data_2 [6] $end
$var wire 1 1" read_data_2 [5] $end
$var wire 1 2" read_data_2 [4] $end
$var wire 1 3" read_data_2 [3] $end
$var wire 1 4" read_data_2 [2] $end
$var wire 1 5" read_data_2 [1] $end
$var wire 1 6" read_data_2 [0] $end
$var reg 4 7" rd [3:0] $end
$var reg 4 8" rs [3:0] $end
$var reg 4 9" rt [3:0] $end
$var reg 4 :" imm_offset [3:0] $end
$var wire 1 ;" imm_offset_sign_ext [15] $end
$var wire 1 <" imm_offset_sign_ext [14] $end
$var wire 1 =" imm_offset_sign_ext [13] $end
$var wire 1 >" imm_offset_sign_ext [12] $end
$var wire 1 ?" imm_offset_sign_ext [11] $end
$var wire 1 @" imm_offset_sign_ext [10] $end
$var wire 1 A" imm_offset_sign_ext [9] $end
$var wire 1 B" imm_offset_sign_ext [8] $end
$var wire 1 C" imm_offset_sign_ext [7] $end
$var wire 1 D" imm_offset_sign_ext [6] $end
$var wire 1 E" imm_offset_sign_ext [5] $end
$var wire 1 F" imm_offset_sign_ext [4] $end
$var wire 1 G" imm_offset_sign_ext [3] $end
$var wire 1 H" imm_offset_sign_ext [2] $end
$var wire 1 I" imm_offset_sign_ext [1] $end
$var wire 1 J" imm_offset_sign_ext [0] $end
$var wire 1 K" imm_offset_sign_ext_shl [15] $end
$var wire 1 L" imm_offset_sign_ext_shl [14] $end
$var wire 1 M" imm_offset_sign_ext_shl [13] $end
$var wire 1 N" imm_offset_sign_ext_shl [12] $end
$var wire 1 O" imm_offset_sign_ext_shl [11] $end
$var wire 1 P" imm_offset_sign_ext_shl [10] $end
$var wire 1 Q" imm_offset_sign_ext_shl [9] $end
$var wire 1 R" imm_offset_sign_ext_shl [8] $end
$var wire 1 S" imm_offset_sign_ext_shl [7] $end
$var wire 1 T" imm_offset_sign_ext_shl [6] $end
$var wire 1 U" imm_offset_sign_ext_shl [5] $end
$var wire 1 V" imm_offset_sign_ext_shl [4] $end
$var wire 1 W" imm_offset_sign_ext_shl [3] $end
$var wire 1 X" imm_offset_sign_ext_shl [2] $end
$var wire 1 Y" imm_offset_sign_ext_shl [1] $end
$var wire 1 Z" imm_offset_sign_ext_shl [0] $end
$var reg 8 [" imm_8bit [7:0] $end
$var reg 9 \" branch_offset [8:0] $end
$var reg 3 ]" branch_cond [2:0] $end
$var wire 1 ^" next_pc [15] $end
$var wire 1 _" next_pc [14] $end
$var wire 1 `" next_pc [13] $end
$var wire 1 a" next_pc [12] $end
$var wire 1 b" next_pc [11] $end
$var wire 1 c" next_pc [10] $end
$var wire 1 d" next_pc [9] $end
$var wire 1 e" next_pc [8] $end
$var wire 1 f" next_pc [7] $end
$var wire 1 g" next_pc [6] $end
$var wire 1 h" next_pc [5] $end
$var wire 1 i" next_pc [4] $end
$var wire 1 j" next_pc [3] $end
$var wire 1 k" next_pc [2] $end
$var wire 1 l" next_pc [1] $end
$var wire 1 m" next_pc [0] $end
$var wire 1 n" mem_read_data [15] $end
$var wire 1 o" mem_read_data [14] $end
$var wire 1 p" mem_read_data [13] $end
$var wire 1 q" mem_read_data [12] $end
$var wire 1 r" mem_read_data [11] $end
$var wire 1 s" mem_read_data [10] $end
$var wire 1 t" mem_read_data [9] $end
$var wire 1 u" mem_read_data [8] $end
$var wire 1 v" mem_read_data [7] $end
$var wire 1 w" mem_read_data [6] $end
$var wire 1 x" mem_read_data [5] $end
$var wire 1 y" mem_read_data [4] $end
$var wire 1 z" mem_read_data [3] $end
$var wire 1 {" mem_read_data [2] $end
$var wire 1 |" mem_read_data [1] $end
$var wire 1 }" mem_read_data [0] $end
$var wire 1 ~" reg_write_data [15] $end
$var wire 1 !# reg_write_data [14] $end
$var wire 1 "# reg_write_data [13] $end
$var wire 1 ## reg_write_data [12] $end
$var wire 1 $# reg_write_data [11] $end
$var wire 1 %# reg_write_data [10] $end
$var wire 1 &# reg_write_data [9] $end
$var wire 1 '# reg_write_data [8] $end
$var wire 1 (# reg_write_data [7] $end
$var wire 1 )# reg_write_data [6] $end
$var wire 1 *# reg_write_data [5] $end
$var wire 1 +# reg_write_data [4] $end
$var wire 1 ,# reg_write_data [3] $end
$var wire 1 -# reg_write_data [2] $end
$var wire 1 .# reg_write_data [1] $end
$var wire 1 /# reg_write_data [0] $end
$var wire 1 0# LLB_data [15] $end
$var wire 1 1# LLB_data [14] $end
$var wire 1 2# LLB_data [13] $end
$var wire 1 3# LLB_data [12] $end
$var wire 1 4# LLB_data [11] $end
$var wire 1 5# LLB_data [10] $end
$var wire 1 6# LLB_data [9] $end
$var wire 1 7# LLB_data [8] $end
$var wire 1 8# LLB_data [7] $end
$var wire 1 9# LLB_data [6] $end
$var wire 1 :# LLB_data [5] $end
$var wire 1 ;# LLB_data [4] $end
$var wire 1 <# LLB_data [3] $end
$var wire 1 =# LLB_data [2] $end
$var wire 1 ># LLB_data [1] $end
$var wire 1 ?# LLB_data [0] $end
$var wire 1 @# LHB_data [15] $end
$var wire 1 A# LHB_data [14] $end
$var wire 1 B# LHB_data [13] $end
$var wire 1 C# LHB_data [12] $end
$var wire 1 D# LHB_data [11] $end
$var wire 1 E# LHB_data [10] $end
$var wire 1 F# LHB_data [9] $end
$var wire 1 G# LHB_data [8] $end
$var wire 1 H# LHB_data [7] $end
$var wire 1 I# LHB_data [6] $end
$var wire 1 J# LHB_data [5] $end
$var wire 1 K# LHB_data [4] $end
$var wire 1 L# LHB_data [3] $end
$var wire 1 M# LHB_data [2] $end
$var wire 1 N# LHB_data [1] $end
$var wire 1 O# LHB_data [0] $end
$var wire 1 P# flag [2] $end
$var wire 1 Q# flag [1] $end
$var wire 1 R# flag [0] $end
$var wire 1 S# RegDst $end
$var wire 1 T# ALUSrc $end
$var wire 1 U# RegWrite $end
$var wire 1 V# MemWrite $end
$var wire 1 W# MemRead $end
$var wire 1 X# MemEnable $end
$var wire 1 Y# MemtoReg $end

$scope module instr_mem $end
$var parameter 32 Z# ADDR_WIDTH $end
$var wire 1 I! data_out [15] $end
$var wire 1 J! data_out [14] $end
$var wire 1 K! data_out [13] $end
$var wire 1 L! data_out [12] $end
$var wire 1 M! data_out [11] $end
$var wire 1 N! data_out [10] $end
$var wire 1 O! data_out [9] $end
$var wire 1 P! data_out [8] $end
$var wire 1 Q! data_out [7] $end
$var wire 1 R! data_out [6] $end
$var wire 1 S! data_out [5] $end
$var wire 1 T! data_out [4] $end
$var wire 1 U! data_out [3] $end
$var wire 1 V! data_out [2] $end
$var wire 1 W! data_out [1] $end
$var wire 1 X! data_out [0] $end
$var wire 1 [# data_in [15] $end
$var wire 1 \# data_in [14] $end
$var wire 1 ]# data_in [13] $end
$var wire 1 ^# data_in [12] $end
$var wire 1 _# data_in [11] $end
$var wire 1 `# data_in [10] $end
$var wire 1 a# data_in [9] $end
$var wire 1 b# data_in [8] $end
$var wire 1 c# data_in [7] $end
$var wire 1 d# data_in [6] $end
$var wire 1 e# data_in [5] $end
$var wire 1 f# data_in [4] $end
$var wire 1 g# data_in [3] $end
$var wire 1 h# data_in [2] $end
$var wire 1 i# data_in [1] $end
$var wire 1 j# data_in [0] $end
$var wire 1 k# addr [15] $end
$var wire 1 l# addr [14] $end
$var wire 1 m# addr [13] $end
$var wire 1 n# addr [12] $end
$var wire 1 o# addr [11] $end
$var wire 1 p# addr [10] $end
$var wire 1 q# addr [9] $end
$var wire 1 r# addr [8] $end
$var wire 1 s# addr [7] $end
$var wire 1 t# addr [6] $end
$var wire 1 u# addr [5] $end
$var wire 1 v# addr [4] $end
$var wire 1 w# addr [3] $end
$var wire 1 x# addr [2] $end
$var wire 1 y# addr [1] $end
$var wire 1 z# addr [0] $end
$var wire 1 {# enable $end
$var wire 1 |# wr $end
$var wire 1 !! clk $end
$var wire 1 }# rst $end
$var reg 1 ~# loaded $end
$upscope $end

$scope module rf $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 i! SrcReg1 [3] $end
$var wire 1 j! SrcReg1 [2] $end
$var wire 1 k! SrcReg1 [1] $end
$var wire 1 l! SrcReg1 [0] $end
$var wire 1 m! SrcReg2 [3] $end
$var wire 1 n! SrcReg2 [2] $end
$var wire 1 o! SrcReg2 [1] $end
$var wire 1 p! SrcReg2 [0] $end
$var wire 1 q! DstReg [3] $end
$var wire 1 r! DstReg [2] $end
$var wire 1 s! DstReg [1] $end
$var wire 1 t! DstReg [0] $end
$var wire 1 S# WriteReg $end
$var wire 1 ~" DstData [15] $end
$var wire 1 !# DstData [14] $end
$var wire 1 "# DstData [13] $end
$var wire 1 ## DstData [12] $end
$var wire 1 $# DstData [11] $end
$var wire 1 %# DstData [10] $end
$var wire 1 &# DstData [9] $end
$var wire 1 '# DstData [8] $end
$var wire 1 (# DstData [7] $end
$var wire 1 )# DstData [6] $end
$var wire 1 *# DstData [5] $end
$var wire 1 +# DstData [4] $end
$var wire 1 ,# DstData [3] $end
$var wire 1 -# DstData [2] $end
$var wire 1 .# DstData [1] $end
$var wire 1 /# DstData [0] $end
$var wire 1 u! SrcData1 [15] $end
$var wire 1 v! SrcData1 [14] $end
$var wire 1 w! SrcData1 [13] $end
$var wire 1 x! SrcData1 [12] $end
$var wire 1 y! SrcData1 [11] $end
$var wire 1 z! SrcData1 [10] $end
$var wire 1 {! SrcData1 [9] $end
$var wire 1 |! SrcData1 [8] $end
$var wire 1 }! SrcData1 [7] $end
$var wire 1 ~! SrcData1 [6] $end
$var wire 1 !" SrcData1 [5] $end
$var wire 1 "" SrcData1 [4] $end
$var wire 1 #" SrcData1 [3] $end
$var wire 1 $" SrcData1 [2] $end
$var wire 1 %" SrcData1 [1] $end
$var wire 1 &" SrcData1 [0] $end
$var wire 1 '" SrcData2 [15] $end
$var wire 1 (" SrcData2 [14] $end
$var wire 1 )" SrcData2 [13] $end
$var wire 1 *" SrcData2 [12] $end
$var wire 1 +" SrcData2 [11] $end
$var wire 1 ," SrcData2 [10] $end
$var wire 1 -" SrcData2 [9] $end
$var wire 1 ." SrcData2 [8] $end
$var wire 1 /" SrcData2 [7] $end
$var wire 1 0" SrcData2 [6] $end
$var wire 1 1" SrcData2 [5] $end
$var wire 1 2" SrcData2 [4] $end
$var wire 1 3" SrcData2 [3] $end
$var wire 1 4" SrcData2 [2] $end
$var wire 1 5" SrcData2 [1] $end
$var wire 1 6" SrcData2 [0] $end
$var wire 1 "$ ReadEnable1 [15] $end
$var wire 1 #$ ReadEnable1 [14] $end
$var wire 1 $$ ReadEnable1 [13] $end
$var wire 1 %$ ReadEnable1 [12] $end
$var wire 1 &$ ReadEnable1 [11] $end
$var wire 1 '$ ReadEnable1 [10] $end
$var wire 1 ($ ReadEnable1 [9] $end
$var wire 1 )$ ReadEnable1 [8] $end
$var wire 1 *$ ReadEnable1 [7] $end
$var wire 1 +$ ReadEnable1 [6] $end
$var wire 1 ,$ ReadEnable1 [5] $end
$var wire 1 -$ ReadEnable1 [4] $end
$var wire 1 .$ ReadEnable1 [3] $end
$var wire 1 /$ ReadEnable1 [2] $end
$var wire 1 0$ ReadEnable1 [1] $end
$var wire 1 1$ ReadEnable1 [0] $end
$var wire 1 2$ ReadEnable2 [15] $end
$var wire 1 3$ ReadEnable2 [14] $end
$var wire 1 4$ ReadEnable2 [13] $end
$var wire 1 5$ ReadEnable2 [12] $end
$var wire 1 6$ ReadEnable2 [11] $end
$var wire 1 7$ ReadEnable2 [10] $end
$var wire 1 8$ ReadEnable2 [9] $end
$var wire 1 9$ ReadEnable2 [8] $end
$var wire 1 :$ ReadEnable2 [7] $end
$var wire 1 ;$ ReadEnable2 [6] $end
$var wire 1 <$ ReadEnable2 [5] $end
$var wire 1 =$ ReadEnable2 [4] $end
$var wire 1 >$ ReadEnable2 [3] $end
$var wire 1 ?$ ReadEnable2 [2] $end
$var wire 1 @$ ReadEnable2 [1] $end
$var wire 1 A$ ReadEnable2 [0] $end
$var wire 1 B$ WriteEnable [15] $end
$var wire 1 C$ WriteEnable [14] $end
$var wire 1 D$ WriteEnable [13] $end
$var wire 1 E$ WriteEnable [12] $end
$var wire 1 F$ WriteEnable [11] $end
$var wire 1 G$ WriteEnable [10] $end
$var wire 1 H$ WriteEnable [9] $end
$var wire 1 I$ WriteEnable [8] $end
$var wire 1 J$ WriteEnable [7] $end
$var wire 1 K$ WriteEnable [6] $end
$var wire 1 L$ WriteEnable [5] $end
$var wire 1 M$ WriteEnable [4] $end
$var wire 1 N$ WriteEnable [3] $end
$var wire 1 O$ WriteEnable [2] $end
$var wire 1 P$ WriteEnable [1] $end
$var wire 1 Q$ WriteEnable [0] $end
$var wire 1 R$ out_SrcData1 [15] $end
$var wire 1 S$ out_SrcData1 [14] $end
$var wire 1 T$ out_SrcData1 [13] $end
$var wire 1 U$ out_SrcData1 [12] $end
$var wire 1 V$ out_SrcData1 [11] $end
$var wire 1 W$ out_SrcData1 [10] $end
$var wire 1 X$ out_SrcData1 [9] $end
$var wire 1 Y$ out_SrcData1 [8] $end
$var wire 1 Z$ out_SrcData1 [7] $end
$var wire 1 [$ out_SrcData1 [6] $end
$var wire 1 \$ out_SrcData1 [5] $end
$var wire 1 ]$ out_SrcData1 [4] $end
$var wire 1 ^$ out_SrcData1 [3] $end
$var wire 1 _$ out_SrcData1 [2] $end
$var wire 1 `$ out_SrcData1 [1] $end
$var wire 1 a$ out_SrcData1 [0] $end
$var wire 1 b$ out_SrcData2 [15] $end
$var wire 1 c$ out_SrcData2 [14] $end
$var wire 1 d$ out_SrcData2 [13] $end
$var wire 1 e$ out_SrcData2 [12] $end
$var wire 1 f$ out_SrcData2 [11] $end
$var wire 1 g$ out_SrcData2 [10] $end
$var wire 1 h$ out_SrcData2 [9] $end
$var wire 1 i$ out_SrcData2 [8] $end
$var wire 1 j$ out_SrcData2 [7] $end
$var wire 1 k$ out_SrcData2 [6] $end
$var wire 1 l$ out_SrcData2 [5] $end
$var wire 1 m$ out_SrcData2 [4] $end
$var wire 1 n$ out_SrcData2 [3] $end
$var wire 1 o$ out_SrcData2 [2] $end
$var wire 1 p$ out_SrcData2 [1] $end
$var wire 1 q$ out_SrcData2 [0] $end

$scope module readDecoder1 $end
$var wire 1 i! RegId [3] $end
$var wire 1 j! RegId [2] $end
$var wire 1 k! RegId [1] $end
$var wire 1 l! RegId [0] $end
$var wire 1 "$ Wordline [15] $end
$var wire 1 #$ Wordline [14] $end
$var wire 1 $$ Wordline [13] $end
$var wire 1 %$ Wordline [12] $end
$var wire 1 &$ Wordline [11] $end
$var wire 1 '$ Wordline [10] $end
$var wire 1 ($ Wordline [9] $end
$var wire 1 )$ Wordline [8] $end
$var wire 1 *$ Wordline [7] $end
$var wire 1 +$ Wordline [6] $end
$var wire 1 ,$ Wordline [5] $end
$var wire 1 -$ Wordline [4] $end
$var wire 1 .$ Wordline [3] $end
$var wire 1 /$ Wordline [2] $end
$var wire 1 0$ Wordline [1] $end
$var wire 1 1$ Wordline [0] $end

$scope module read_shift $end
$var wire 1 r$ Mode [1] $end
$var wire 1 s$ Mode [0] $end
$var wire 1 t$ Shift_in [15] $end
$var wire 1 u$ Shift_in [14] $end
$var wire 1 v$ Shift_in [13] $end
$var wire 1 w$ Shift_in [12] $end
$var wire 1 x$ Shift_in [11] $end
$var wire 1 y$ Shift_in [10] $end
$var wire 1 z$ Shift_in [9] $end
$var wire 1 {$ Shift_in [8] $end
$var wire 1 |$ Shift_in [7] $end
$var wire 1 }$ Shift_in [6] $end
$var wire 1 ~$ Shift_in [5] $end
$var wire 1 !% Shift_in [4] $end
$var wire 1 "% Shift_in [3] $end
$var wire 1 #% Shift_in [2] $end
$var wire 1 $% Shift_in [1] $end
$var wire 1 %% Shift_in [0] $end
$var wire 1 i! Shift_val [3] $end
$var wire 1 j! Shift_val [2] $end
$var wire 1 k! Shift_val [1] $end
$var wire 1 l! Shift_val [0] $end
$var wire 1 "$ Shift_out [15] $end
$var wire 1 #$ Shift_out [14] $end
$var wire 1 $$ Shift_out [13] $end
$var wire 1 %$ Shift_out [12] $end
$var wire 1 &$ Shift_out [11] $end
$var wire 1 '$ Shift_out [10] $end
$var wire 1 ($ Shift_out [9] $end
$var wire 1 )$ Shift_out [8] $end
$var wire 1 *$ Shift_out [7] $end
$var wire 1 +$ Shift_out [6] $end
$var wire 1 ,$ Shift_out [5] $end
$var wire 1 -$ Shift_out [4] $end
$var wire 1 .$ Shift_out [3] $end
$var wire 1 /$ Shift_out [2] $end
$var wire 1 0$ Shift_out [1] $end
$var wire 1 1$ Shift_out [0] $end
$var reg 16 &% shft_stg1_right [15:0] $end
$var reg 16 '% shft_stg1_left [15:0] $end
$var reg 16 (% ror_stg1 [15:0] $end
$var wire 1 )% msb_sra $end
$var reg 16 *% sra_out [15:0] $end
$var reg 16 +% sll_out [15:0] $end
$var reg 16 ,% ror_out [15:0] $end
$upscope $end
$upscope $end

$scope module readDecoder2 $end
$var wire 1 m! RegId [3] $end
$var wire 1 n! RegId [2] $end
$var wire 1 o! RegId [1] $end
$var wire 1 p! RegId [0] $end
$var wire 1 2$ Wordline [15] $end
$var wire 1 3$ Wordline [14] $end
$var wire 1 4$ Wordline [13] $end
$var wire 1 5$ Wordline [12] $end
$var wire 1 6$ Wordline [11] $end
$var wire 1 7$ Wordline [10] $end
$var wire 1 8$ Wordline [9] $end
$var wire 1 9$ Wordline [8] $end
$var wire 1 :$ Wordline [7] $end
$var wire 1 ;$ Wordline [6] $end
$var wire 1 <$ Wordline [5] $end
$var wire 1 =$ Wordline [4] $end
$var wire 1 >$ Wordline [3] $end
$var wire 1 ?$ Wordline [2] $end
$var wire 1 @$ Wordline [1] $end
$var wire 1 A$ Wordline [0] $end

$scope module read_shift $end
$var wire 1 -% Mode [1] $end
$var wire 1 .% Mode [0] $end
$var wire 1 /% Shift_in [15] $end
$var wire 1 0% Shift_in [14] $end
$var wire 1 1% Shift_in [13] $end
$var wire 1 2% Shift_in [12] $end
$var wire 1 3% Shift_in [11] $end
$var wire 1 4% Shift_in [10] $end
$var wire 1 5% Shift_in [9] $end
$var wire 1 6% Shift_in [8] $end
$var wire 1 7% Shift_in [7] $end
$var wire 1 8% Shift_in [6] $end
$var wire 1 9% Shift_in [5] $end
$var wire 1 :% Shift_in [4] $end
$var wire 1 ;% Shift_in [3] $end
$var wire 1 <% Shift_in [2] $end
$var wire 1 =% Shift_in [1] $end
$var wire 1 >% Shift_in [0] $end
$var wire 1 m! Shift_val [3] $end
$var wire 1 n! Shift_val [2] $end
$var wire 1 o! Shift_val [1] $end
$var wire 1 p! Shift_val [0] $end
$var wire 1 2$ Shift_out [15] $end
$var wire 1 3$ Shift_out [14] $end
$var wire 1 4$ Shift_out [13] $end
$var wire 1 5$ Shift_out [12] $end
$var wire 1 6$ Shift_out [11] $end
$var wire 1 7$ Shift_out [10] $end
$var wire 1 8$ Shift_out [9] $end
$var wire 1 9$ Shift_out [8] $end
$var wire 1 :$ Shift_out [7] $end
$var wire 1 ;$ Shift_out [6] $end
$var wire 1 <$ Shift_out [5] $end
$var wire 1 =$ Shift_out [4] $end
$var wire 1 >$ Shift_out [3] $end
$var wire 1 ?$ Shift_out [2] $end
$var wire 1 @$ Shift_out [1] $end
$var wire 1 A$ Shift_out [0] $end
$var reg 16 ?% shft_stg1_right [15:0] $end
$var reg 16 @% shft_stg1_left [15:0] $end
$var reg 16 A% ror_stg1 [15:0] $end
$var wire 1 B% msb_sra $end
$var reg 16 C% sra_out [15:0] $end
$var reg 16 D% sll_out [15:0] $end
$var reg 16 E% ror_out [15:0] $end
$upscope $end
$upscope $end

$scope module writeDecoder $end
$var wire 1 q! RegId [3] $end
$var wire 1 r! RegId [2] $end
$var wire 1 s! RegId [1] $end
$var wire 1 t! RegId [0] $end
$var wire 1 S# WriteReg $end
$var wire 1 B$ Wordline [15] $end
$var wire 1 C$ Wordline [14] $end
$var wire 1 D$ Wordline [13] $end
$var wire 1 E$ Wordline [12] $end
$var wire 1 F$ Wordline [11] $end
$var wire 1 G$ Wordline [10] $end
$var wire 1 H$ Wordline [9] $end
$var wire 1 I$ Wordline [8] $end
$var wire 1 J$ Wordline [7] $end
$var wire 1 K$ Wordline [6] $end
$var wire 1 L$ Wordline [5] $end
$var wire 1 M$ Wordline [4] $end
$var wire 1 N$ Wordline [3] $end
$var wire 1 O$ Wordline [2] $end
$var wire 1 P$ Wordline [1] $end
$var wire 1 Q$ Wordline [0] $end

$scope module write_shift $end
$var wire 1 F% Mode [1] $end
$var wire 1 G% Mode [0] $end
$var wire 1 H% Shift_in [15] $end
$var wire 1 I% Shift_in [14] $end
$var wire 1 J% Shift_in [13] $end
$var wire 1 K% Shift_in [12] $end
$var wire 1 L% Shift_in [11] $end
$var wire 1 M% Shift_in [10] $end
$var wire 1 N% Shift_in [9] $end
$var wire 1 O% Shift_in [8] $end
$var wire 1 P% Shift_in [7] $end
$var wire 1 Q% Shift_in [6] $end
$var wire 1 R% Shift_in [5] $end
$var wire 1 S% Shift_in [4] $end
$var wire 1 T% Shift_in [3] $end
$var wire 1 U% Shift_in [2] $end
$var wire 1 V% Shift_in [1] $end
$var wire 1 S# Shift_in [0] $end
$var wire 1 q! Shift_val [3] $end
$var wire 1 r! Shift_val [2] $end
$var wire 1 s! Shift_val [1] $end
$var wire 1 t! Shift_val [0] $end
$var wire 1 B$ Shift_out [15] $end
$var wire 1 C$ Shift_out [14] $end
$var wire 1 D$ Shift_out [13] $end
$var wire 1 E$ Shift_out [12] $end
$var wire 1 F$ Shift_out [11] $end
$var wire 1 G$ Shift_out [10] $end
$var wire 1 H$ Shift_out [9] $end
$var wire 1 I$ Shift_out [8] $end
$var wire 1 J$ Shift_out [7] $end
$var wire 1 K$ Shift_out [6] $end
$var wire 1 L$ Shift_out [5] $end
$var wire 1 M$ Shift_out [4] $end
$var wire 1 N$ Shift_out [3] $end
$var wire 1 O$ Shift_out [2] $end
$var wire 1 P$ Shift_out [1] $end
$var wire 1 Q$ Shift_out [0] $end
$var reg 16 W% shft_stg1_right [15:0] $end
$var reg 16 X% shft_stg1_left [15:0] $end
$var reg 16 Y% ror_stg1 [15:0] $end
$var wire 1 Z% msb_sra $end
$var reg 16 [% sra_out [15:0] $end
$var reg 16 \% sll_out [15:0] $end
$var reg 16 ]% ror_out [15:0] $end
$upscope $end
$upscope $end

$scope module register_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 Q$ WriteReg $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 ^% Q $end

$scope module DFF $end
$var wire 1 ^% q $end
$var wire 1 /# d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 _% state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 `% Q $end

$scope module DFF $end
$var wire 1 `% q $end
$var wire 1 .# d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 a% state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 b% Q $end

$scope module DFF $end
$var wire 1 b% q $end
$var wire 1 -# d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 c% state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 d% Q $end

$scope module DFF $end
$var wire 1 d% q $end
$var wire 1 ,# d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 e% state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 f% Q $end

$scope module DFF $end
$var wire 1 f% q $end
$var wire 1 +# d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 g% state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 h% Q $end

$scope module DFF $end
$var wire 1 h% q $end
$var wire 1 *# d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 i% state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 j% Q $end

$scope module DFF $end
$var wire 1 j% q $end
$var wire 1 )# d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 k% state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 l% Q $end

$scope module DFF $end
$var wire 1 l% q $end
$var wire 1 (# d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 m% state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 n% Q $end

$scope module DFF $end
$var wire 1 n% q $end
$var wire 1 '# d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 o% state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 p% Q $end

$scope module DFF $end
$var wire 1 p% q $end
$var wire 1 &# d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 q% state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 r% Q $end

$scope module DFF $end
$var wire 1 r% q $end
$var wire 1 %# d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 s% state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 t% Q $end

$scope module DFF $end
$var wire 1 t% q $end
$var wire 1 $# d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 u% state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 v% Q $end

$scope module DFF $end
$var wire 1 v% q $end
$var wire 1 ## d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 w% state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 x% Q $end

$scope module DFF $end
$var wire 1 x% q $end
$var wire 1 "# d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 y% state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 z% Q $end

$scope module DFF $end
$var wire 1 z% q $end
$var wire 1 !# d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 {% state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 Q$ WriteEnable $end
$var wire 1 1$ ReadEnable1 $end
$var wire 1 A$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 |% Q $end

$scope module DFF $end
$var wire 1 |% q $end
$var wire 1 ~" d $end
$var wire 1 Q$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 }% state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 P$ WriteReg $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 ~% Q $end

$scope module DFF $end
$var wire 1 ~% q $end
$var wire 1 /# d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 !& state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 "& Q $end

$scope module DFF $end
$var wire 1 "& q $end
$var wire 1 .# d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 #& state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 $& Q $end

$scope module DFF $end
$var wire 1 $& q $end
$var wire 1 -# d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 %& state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 && Q $end

$scope module DFF $end
$var wire 1 && q $end
$var wire 1 ,# d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 '& state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 (& Q $end

$scope module DFF $end
$var wire 1 (& q $end
$var wire 1 +# d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 )& state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 *& Q $end

$scope module DFF $end
$var wire 1 *& q $end
$var wire 1 *# d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 +& state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 ,& Q $end

$scope module DFF $end
$var wire 1 ,& q $end
$var wire 1 )# d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 -& state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 .& Q $end

$scope module DFF $end
$var wire 1 .& q $end
$var wire 1 (# d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 /& state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 0& Q $end

$scope module DFF $end
$var wire 1 0& q $end
$var wire 1 '# d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 1& state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 2& Q $end

$scope module DFF $end
$var wire 1 2& q $end
$var wire 1 &# d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 3& state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 4& Q $end

$scope module DFF $end
$var wire 1 4& q $end
$var wire 1 %# d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 5& state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 6& Q $end

$scope module DFF $end
$var wire 1 6& q $end
$var wire 1 $# d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 7& state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 8& Q $end

$scope module DFF $end
$var wire 1 8& q $end
$var wire 1 ## d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 9& state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 :& Q $end

$scope module DFF $end
$var wire 1 :& q $end
$var wire 1 "# d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ;& state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 <& Q $end

$scope module DFF $end
$var wire 1 <& q $end
$var wire 1 !# d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 =& state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 P$ WriteEnable $end
$var wire 1 0$ ReadEnable1 $end
$var wire 1 @$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 >& Q $end

$scope module DFF $end
$var wire 1 >& q $end
$var wire 1 ~" d $end
$var wire 1 P$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ?& state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 O$ WriteReg $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 @& Q $end

$scope module DFF $end
$var wire 1 @& q $end
$var wire 1 /# d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 A& state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 B& Q $end

$scope module DFF $end
$var wire 1 B& q $end
$var wire 1 .# d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 C& state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 D& Q $end

$scope module DFF $end
$var wire 1 D& q $end
$var wire 1 -# d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 E& state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 F& Q $end

$scope module DFF $end
$var wire 1 F& q $end
$var wire 1 ,# d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 G& state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 H& Q $end

$scope module DFF $end
$var wire 1 H& q $end
$var wire 1 +# d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 I& state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 J& Q $end

$scope module DFF $end
$var wire 1 J& q $end
$var wire 1 *# d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 K& state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 L& Q $end

$scope module DFF $end
$var wire 1 L& q $end
$var wire 1 )# d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 M& state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 N& Q $end

$scope module DFF $end
$var wire 1 N& q $end
$var wire 1 (# d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 O& state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 P& Q $end

$scope module DFF $end
$var wire 1 P& q $end
$var wire 1 '# d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 Q& state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 R& Q $end

$scope module DFF $end
$var wire 1 R& q $end
$var wire 1 &# d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 S& state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 T& Q $end

$scope module DFF $end
$var wire 1 T& q $end
$var wire 1 %# d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 U& state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 V& Q $end

$scope module DFF $end
$var wire 1 V& q $end
$var wire 1 $# d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 W& state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 X& Q $end

$scope module DFF $end
$var wire 1 X& q $end
$var wire 1 ## d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 Y& state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 Z& Q $end

$scope module DFF $end
$var wire 1 Z& q $end
$var wire 1 "# d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 [& state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 \& Q $end

$scope module DFF $end
$var wire 1 \& q $end
$var wire 1 !# d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ]& state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 O$ WriteEnable $end
$var wire 1 /$ ReadEnable1 $end
$var wire 1 ?$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 ^& Q $end

$scope module DFF $end
$var wire 1 ^& q $end
$var wire 1 ~" d $end
$var wire 1 O$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 _& state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 N$ WriteReg $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 `& Q $end

$scope module DFF $end
$var wire 1 `& q $end
$var wire 1 /# d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 a& state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 b& Q $end

$scope module DFF $end
$var wire 1 b& q $end
$var wire 1 .# d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 c& state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 d& Q $end

$scope module DFF $end
$var wire 1 d& q $end
$var wire 1 -# d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 e& state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 f& Q $end

$scope module DFF $end
$var wire 1 f& q $end
$var wire 1 ,# d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 g& state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 h& Q $end

$scope module DFF $end
$var wire 1 h& q $end
$var wire 1 +# d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 i& state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 j& Q $end

$scope module DFF $end
$var wire 1 j& q $end
$var wire 1 *# d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 k& state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 l& Q $end

$scope module DFF $end
$var wire 1 l& q $end
$var wire 1 )# d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 m& state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 n& Q $end

$scope module DFF $end
$var wire 1 n& q $end
$var wire 1 (# d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 o& state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 p& Q $end

$scope module DFF $end
$var wire 1 p& q $end
$var wire 1 '# d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 q& state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 r& Q $end

$scope module DFF $end
$var wire 1 r& q $end
$var wire 1 &# d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 s& state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 t& Q $end

$scope module DFF $end
$var wire 1 t& q $end
$var wire 1 %# d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 u& state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 v& Q $end

$scope module DFF $end
$var wire 1 v& q $end
$var wire 1 $# d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 w& state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 x& Q $end

$scope module DFF $end
$var wire 1 x& q $end
$var wire 1 ## d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 y& state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 z& Q $end

$scope module DFF $end
$var wire 1 z& q $end
$var wire 1 "# d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 {& state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 |& Q $end

$scope module DFF $end
$var wire 1 |& q $end
$var wire 1 !# d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 }& state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 N$ WriteEnable $end
$var wire 1 .$ ReadEnable1 $end
$var wire 1 >$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 ~& Q $end

$scope module DFF $end
$var wire 1 ~& q $end
$var wire 1 ~" d $end
$var wire 1 N$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 !' state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 M$ WriteReg $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 "' Q $end

$scope module DFF $end
$var wire 1 "' q $end
$var wire 1 /# d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 #' state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 $' Q $end

$scope module DFF $end
$var wire 1 $' q $end
$var wire 1 .# d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 %' state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 &' Q $end

$scope module DFF $end
$var wire 1 &' q $end
$var wire 1 -# d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 '' state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 (' Q $end

$scope module DFF $end
$var wire 1 (' q $end
$var wire 1 ,# d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 )' state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 *' Q $end

$scope module DFF $end
$var wire 1 *' q $end
$var wire 1 +# d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 +' state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 ,' Q $end

$scope module DFF $end
$var wire 1 ,' q $end
$var wire 1 *# d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 -' state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 .' Q $end

$scope module DFF $end
$var wire 1 .' q $end
$var wire 1 )# d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 /' state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 0' Q $end

$scope module DFF $end
$var wire 1 0' q $end
$var wire 1 (# d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 1' state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 2' Q $end

$scope module DFF $end
$var wire 1 2' q $end
$var wire 1 '# d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 3' state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 4' Q $end

$scope module DFF $end
$var wire 1 4' q $end
$var wire 1 &# d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 5' state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 6' Q $end

$scope module DFF $end
$var wire 1 6' q $end
$var wire 1 %# d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 7' state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 8' Q $end

$scope module DFF $end
$var wire 1 8' q $end
$var wire 1 $# d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 9' state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 :' Q $end

$scope module DFF $end
$var wire 1 :' q $end
$var wire 1 ## d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ;' state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 <' Q $end

$scope module DFF $end
$var wire 1 <' q $end
$var wire 1 "# d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 =' state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 >' Q $end

$scope module DFF $end
$var wire 1 >' q $end
$var wire 1 !# d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ?' state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 M$ WriteEnable $end
$var wire 1 -$ ReadEnable1 $end
$var wire 1 =$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 @' Q $end

$scope module DFF $end
$var wire 1 @' q $end
$var wire 1 ~" d $end
$var wire 1 M$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 A' state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 L$ WriteReg $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 B' Q $end

$scope module DFF $end
$var wire 1 B' q $end
$var wire 1 /# d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 C' state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 D' Q $end

$scope module DFF $end
$var wire 1 D' q $end
$var wire 1 .# d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 E' state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 F' Q $end

$scope module DFF $end
$var wire 1 F' q $end
$var wire 1 -# d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 G' state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 H' Q $end

$scope module DFF $end
$var wire 1 H' q $end
$var wire 1 ,# d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 I' state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 J' Q $end

$scope module DFF $end
$var wire 1 J' q $end
$var wire 1 +# d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 K' state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 L' Q $end

$scope module DFF $end
$var wire 1 L' q $end
$var wire 1 *# d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 M' state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 N' Q $end

$scope module DFF $end
$var wire 1 N' q $end
$var wire 1 )# d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 O' state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 P' Q $end

$scope module DFF $end
$var wire 1 P' q $end
$var wire 1 (# d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 Q' state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 R' Q $end

$scope module DFF $end
$var wire 1 R' q $end
$var wire 1 '# d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 S' state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 T' Q $end

$scope module DFF $end
$var wire 1 T' q $end
$var wire 1 &# d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 U' state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 V' Q $end

$scope module DFF $end
$var wire 1 V' q $end
$var wire 1 %# d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 W' state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 X' Q $end

$scope module DFF $end
$var wire 1 X' q $end
$var wire 1 $# d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 Y' state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 Z' Q $end

$scope module DFF $end
$var wire 1 Z' q $end
$var wire 1 ## d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 [' state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 \' Q $end

$scope module DFF $end
$var wire 1 \' q $end
$var wire 1 "# d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ]' state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 ^' Q $end

$scope module DFF $end
$var wire 1 ^' q $end
$var wire 1 !# d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 _' state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 L$ WriteEnable $end
$var wire 1 ,$ ReadEnable1 $end
$var wire 1 <$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 `' Q $end

$scope module DFF $end
$var wire 1 `' q $end
$var wire 1 ~" d $end
$var wire 1 L$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 a' state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 K$ WriteReg $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 b' Q $end

$scope module DFF $end
$var wire 1 b' q $end
$var wire 1 /# d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 c' state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 d' Q $end

$scope module DFF $end
$var wire 1 d' q $end
$var wire 1 .# d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 e' state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 f' Q $end

$scope module DFF $end
$var wire 1 f' q $end
$var wire 1 -# d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 g' state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 h' Q $end

$scope module DFF $end
$var wire 1 h' q $end
$var wire 1 ,# d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 i' state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 j' Q $end

$scope module DFF $end
$var wire 1 j' q $end
$var wire 1 +# d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 k' state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 l' Q $end

$scope module DFF $end
$var wire 1 l' q $end
$var wire 1 *# d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 m' state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 n' Q $end

$scope module DFF $end
$var wire 1 n' q $end
$var wire 1 )# d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 o' state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 p' Q $end

$scope module DFF $end
$var wire 1 p' q $end
$var wire 1 (# d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 q' state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 r' Q $end

$scope module DFF $end
$var wire 1 r' q $end
$var wire 1 '# d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 s' state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 t' Q $end

$scope module DFF $end
$var wire 1 t' q $end
$var wire 1 &# d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 u' state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 v' Q $end

$scope module DFF $end
$var wire 1 v' q $end
$var wire 1 %# d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 w' state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 x' Q $end

$scope module DFF $end
$var wire 1 x' q $end
$var wire 1 $# d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 y' state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 z' Q $end

$scope module DFF $end
$var wire 1 z' q $end
$var wire 1 ## d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 {' state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 |' Q $end

$scope module DFF $end
$var wire 1 |' q $end
$var wire 1 "# d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 }' state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 ~' Q $end

$scope module DFF $end
$var wire 1 ~' q $end
$var wire 1 !# d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 !( state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 K$ WriteEnable $end
$var wire 1 +$ ReadEnable1 $end
$var wire 1 ;$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 "( Q $end

$scope module DFF $end
$var wire 1 "( q $end
$var wire 1 ~" d $end
$var wire 1 K$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 #( state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 J$ WriteReg $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 $( Q $end

$scope module DFF $end
$var wire 1 $( q $end
$var wire 1 /# d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 %( state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 &( Q $end

$scope module DFF $end
$var wire 1 &( q $end
$var wire 1 .# d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 '( state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 (( Q $end

$scope module DFF $end
$var wire 1 (( q $end
$var wire 1 -# d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 )( state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 *( Q $end

$scope module DFF $end
$var wire 1 *( q $end
$var wire 1 ,# d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 +( state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 ,( Q $end

$scope module DFF $end
$var wire 1 ,( q $end
$var wire 1 +# d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 -( state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 .( Q $end

$scope module DFF $end
$var wire 1 .( q $end
$var wire 1 *# d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 /( state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 0( Q $end

$scope module DFF $end
$var wire 1 0( q $end
$var wire 1 )# d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 1( state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 2( Q $end

$scope module DFF $end
$var wire 1 2( q $end
$var wire 1 (# d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 3( state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 4( Q $end

$scope module DFF $end
$var wire 1 4( q $end
$var wire 1 '# d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 5( state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 6( Q $end

$scope module DFF $end
$var wire 1 6( q $end
$var wire 1 &# d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 7( state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 8( Q $end

$scope module DFF $end
$var wire 1 8( q $end
$var wire 1 %# d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 9( state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 :( Q $end

$scope module DFF $end
$var wire 1 :( q $end
$var wire 1 $# d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ;( state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 <( Q $end

$scope module DFF $end
$var wire 1 <( q $end
$var wire 1 ## d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 =( state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 >( Q $end

$scope module DFF $end
$var wire 1 >( q $end
$var wire 1 "# d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ?( state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 @( Q $end

$scope module DFF $end
$var wire 1 @( q $end
$var wire 1 !# d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 A( state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 J$ WriteEnable $end
$var wire 1 *$ ReadEnable1 $end
$var wire 1 :$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 B( Q $end

$scope module DFF $end
$var wire 1 B( q $end
$var wire 1 ~" d $end
$var wire 1 J$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 C( state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 I$ WriteReg $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 D( Q $end

$scope module DFF $end
$var wire 1 D( q $end
$var wire 1 /# d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 E( state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 F( Q $end

$scope module DFF $end
$var wire 1 F( q $end
$var wire 1 .# d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 G( state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 H( Q $end

$scope module DFF $end
$var wire 1 H( q $end
$var wire 1 -# d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 I( state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 J( Q $end

$scope module DFF $end
$var wire 1 J( q $end
$var wire 1 ,# d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 K( state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 L( Q $end

$scope module DFF $end
$var wire 1 L( q $end
$var wire 1 +# d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 M( state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 N( Q $end

$scope module DFF $end
$var wire 1 N( q $end
$var wire 1 *# d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 O( state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 P( Q $end

$scope module DFF $end
$var wire 1 P( q $end
$var wire 1 )# d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 Q( state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 R( Q $end

$scope module DFF $end
$var wire 1 R( q $end
$var wire 1 (# d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 S( state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 T( Q $end

$scope module DFF $end
$var wire 1 T( q $end
$var wire 1 '# d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 U( state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 V( Q $end

$scope module DFF $end
$var wire 1 V( q $end
$var wire 1 &# d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 W( state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 X( Q $end

$scope module DFF $end
$var wire 1 X( q $end
$var wire 1 %# d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 Y( state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 Z( Q $end

$scope module DFF $end
$var wire 1 Z( q $end
$var wire 1 $# d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 [( state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 \( Q $end

$scope module DFF $end
$var wire 1 \( q $end
$var wire 1 ## d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ]( state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 ^( Q $end

$scope module DFF $end
$var wire 1 ^( q $end
$var wire 1 "# d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 _( state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 `( Q $end

$scope module DFF $end
$var wire 1 `( q $end
$var wire 1 !# d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 a( state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 I$ WriteEnable $end
$var wire 1 )$ ReadEnable1 $end
$var wire 1 9$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 b( Q $end

$scope module DFF $end
$var wire 1 b( q $end
$var wire 1 ~" d $end
$var wire 1 I$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 c( state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 H$ WriteReg $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 d( Q $end

$scope module DFF $end
$var wire 1 d( q $end
$var wire 1 /# d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 e( state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 f( Q $end

$scope module DFF $end
$var wire 1 f( q $end
$var wire 1 .# d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 g( state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 h( Q $end

$scope module DFF $end
$var wire 1 h( q $end
$var wire 1 -# d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 i( state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 j( Q $end

$scope module DFF $end
$var wire 1 j( q $end
$var wire 1 ,# d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 k( state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 l( Q $end

$scope module DFF $end
$var wire 1 l( q $end
$var wire 1 +# d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 m( state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 n( Q $end

$scope module DFF $end
$var wire 1 n( q $end
$var wire 1 *# d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 o( state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 p( Q $end

$scope module DFF $end
$var wire 1 p( q $end
$var wire 1 )# d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 q( state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 r( Q $end

$scope module DFF $end
$var wire 1 r( q $end
$var wire 1 (# d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 s( state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 t( Q $end

$scope module DFF $end
$var wire 1 t( q $end
$var wire 1 '# d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 u( state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 v( Q $end

$scope module DFF $end
$var wire 1 v( q $end
$var wire 1 &# d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 w( state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 x( Q $end

$scope module DFF $end
$var wire 1 x( q $end
$var wire 1 %# d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 y( state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 z( Q $end

$scope module DFF $end
$var wire 1 z( q $end
$var wire 1 $# d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 {( state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 |( Q $end

$scope module DFF $end
$var wire 1 |( q $end
$var wire 1 ## d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 }( state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 ~( Q $end

$scope module DFF $end
$var wire 1 ~( q $end
$var wire 1 "# d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 !) state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 ") Q $end

$scope module DFF $end
$var wire 1 ") q $end
$var wire 1 !# d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 #) state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 H$ WriteEnable $end
$var wire 1 ($ ReadEnable1 $end
$var wire 1 8$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 $) Q $end

$scope module DFF $end
$var wire 1 $) q $end
$var wire 1 ~" d $end
$var wire 1 H$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 %) state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 G$ WriteReg $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 &) Q $end

$scope module DFF $end
$var wire 1 &) q $end
$var wire 1 /# d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ') state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 () Q $end

$scope module DFF $end
$var wire 1 () q $end
$var wire 1 .# d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 )) state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 *) Q $end

$scope module DFF $end
$var wire 1 *) q $end
$var wire 1 -# d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 +) state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 ,) Q $end

$scope module DFF $end
$var wire 1 ,) q $end
$var wire 1 ,# d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 -) state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 .) Q $end

$scope module DFF $end
$var wire 1 .) q $end
$var wire 1 +# d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 /) state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 0) Q $end

$scope module DFF $end
$var wire 1 0) q $end
$var wire 1 *# d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 1) state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 2) Q $end

$scope module DFF $end
$var wire 1 2) q $end
$var wire 1 )# d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 3) state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 4) Q $end

$scope module DFF $end
$var wire 1 4) q $end
$var wire 1 (# d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 5) state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 6) Q $end

$scope module DFF $end
$var wire 1 6) q $end
$var wire 1 '# d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 7) state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 8) Q $end

$scope module DFF $end
$var wire 1 8) q $end
$var wire 1 &# d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 9) state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 :) Q $end

$scope module DFF $end
$var wire 1 :) q $end
$var wire 1 %# d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ;) state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 <) Q $end

$scope module DFF $end
$var wire 1 <) q $end
$var wire 1 $# d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 =) state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 >) Q $end

$scope module DFF $end
$var wire 1 >) q $end
$var wire 1 ## d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ?) state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 @) Q $end

$scope module DFF $end
$var wire 1 @) q $end
$var wire 1 "# d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 A) state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 B) Q $end

$scope module DFF $end
$var wire 1 B) q $end
$var wire 1 !# d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 C) state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 G$ WriteEnable $end
$var wire 1 '$ ReadEnable1 $end
$var wire 1 7$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 D) Q $end

$scope module DFF $end
$var wire 1 D) q $end
$var wire 1 ~" d $end
$var wire 1 G$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 E) state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 F$ WriteReg $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 F) Q $end

$scope module DFF $end
$var wire 1 F) q $end
$var wire 1 /# d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 G) state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 H) Q $end

$scope module DFF $end
$var wire 1 H) q $end
$var wire 1 .# d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 I) state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 J) Q $end

$scope module DFF $end
$var wire 1 J) q $end
$var wire 1 -# d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 K) state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 L) Q $end

$scope module DFF $end
$var wire 1 L) q $end
$var wire 1 ,# d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 M) state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 N) Q $end

$scope module DFF $end
$var wire 1 N) q $end
$var wire 1 +# d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 O) state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 P) Q $end

$scope module DFF $end
$var wire 1 P) q $end
$var wire 1 *# d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 Q) state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 R) Q $end

$scope module DFF $end
$var wire 1 R) q $end
$var wire 1 )# d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 S) state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 T) Q $end

$scope module DFF $end
$var wire 1 T) q $end
$var wire 1 (# d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 U) state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 V) Q $end

$scope module DFF $end
$var wire 1 V) q $end
$var wire 1 '# d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 W) state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 X) Q $end

$scope module DFF $end
$var wire 1 X) q $end
$var wire 1 &# d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 Y) state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 Z) Q $end

$scope module DFF $end
$var wire 1 Z) q $end
$var wire 1 %# d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 [) state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 \) Q $end

$scope module DFF $end
$var wire 1 \) q $end
$var wire 1 $# d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ]) state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 ^) Q $end

$scope module DFF $end
$var wire 1 ^) q $end
$var wire 1 ## d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 _) state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 `) Q $end

$scope module DFF $end
$var wire 1 `) q $end
$var wire 1 "# d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 a) state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 b) Q $end

$scope module DFF $end
$var wire 1 b) q $end
$var wire 1 !# d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 c) state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 F$ WriteEnable $end
$var wire 1 &$ ReadEnable1 $end
$var wire 1 6$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 d) Q $end

$scope module DFF $end
$var wire 1 d) q $end
$var wire 1 ~" d $end
$var wire 1 F$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 e) state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 E$ WriteReg $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 f) Q $end

$scope module DFF $end
$var wire 1 f) q $end
$var wire 1 /# d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 g) state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 h) Q $end

$scope module DFF $end
$var wire 1 h) q $end
$var wire 1 .# d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 i) state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 j) Q $end

$scope module DFF $end
$var wire 1 j) q $end
$var wire 1 -# d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 k) state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 l) Q $end

$scope module DFF $end
$var wire 1 l) q $end
$var wire 1 ,# d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 m) state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 n) Q $end

$scope module DFF $end
$var wire 1 n) q $end
$var wire 1 +# d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 o) state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 p) Q $end

$scope module DFF $end
$var wire 1 p) q $end
$var wire 1 *# d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 q) state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 r) Q $end

$scope module DFF $end
$var wire 1 r) q $end
$var wire 1 )# d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 s) state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 t) Q $end

$scope module DFF $end
$var wire 1 t) q $end
$var wire 1 (# d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 u) state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 v) Q $end

$scope module DFF $end
$var wire 1 v) q $end
$var wire 1 '# d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 w) state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 x) Q $end

$scope module DFF $end
$var wire 1 x) q $end
$var wire 1 &# d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 y) state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 z) Q $end

$scope module DFF $end
$var wire 1 z) q $end
$var wire 1 %# d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 {) state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 |) Q $end

$scope module DFF $end
$var wire 1 |) q $end
$var wire 1 $# d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 }) state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 ~) Q $end

$scope module DFF $end
$var wire 1 ~) q $end
$var wire 1 ## d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 !* state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 "* Q $end

$scope module DFF $end
$var wire 1 "* q $end
$var wire 1 "# d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 #* state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 $* Q $end

$scope module DFF $end
$var wire 1 $* q $end
$var wire 1 !# d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 %* state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 E$ WriteEnable $end
$var wire 1 %$ ReadEnable1 $end
$var wire 1 5$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 &* Q $end

$scope module DFF $end
$var wire 1 &* q $end
$var wire 1 ~" d $end
$var wire 1 E$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 '* state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 D$ WriteReg $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 (* Q $end

$scope module DFF $end
$var wire 1 (* q $end
$var wire 1 /# d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 )* state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 ** Q $end

$scope module DFF $end
$var wire 1 ** q $end
$var wire 1 .# d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 +* state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 ,* Q $end

$scope module DFF $end
$var wire 1 ,* q $end
$var wire 1 -# d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 -* state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 .* Q $end

$scope module DFF $end
$var wire 1 .* q $end
$var wire 1 ,# d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 /* state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 0* Q $end

$scope module DFF $end
$var wire 1 0* q $end
$var wire 1 +# d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 1* state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 2* Q $end

$scope module DFF $end
$var wire 1 2* q $end
$var wire 1 *# d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 3* state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 4* Q $end

$scope module DFF $end
$var wire 1 4* q $end
$var wire 1 )# d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 5* state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 6* Q $end

$scope module DFF $end
$var wire 1 6* q $end
$var wire 1 (# d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 7* state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 8* Q $end

$scope module DFF $end
$var wire 1 8* q $end
$var wire 1 '# d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 9* state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 :* Q $end

$scope module DFF $end
$var wire 1 :* q $end
$var wire 1 &# d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ;* state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 <* Q $end

$scope module DFF $end
$var wire 1 <* q $end
$var wire 1 %# d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 =* state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 >* Q $end

$scope module DFF $end
$var wire 1 >* q $end
$var wire 1 $# d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ?* state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 @* Q $end

$scope module DFF $end
$var wire 1 @* q $end
$var wire 1 ## d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 A* state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 B* Q $end

$scope module DFF $end
$var wire 1 B* q $end
$var wire 1 "# d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 C* state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 D* Q $end

$scope module DFF $end
$var wire 1 D* q $end
$var wire 1 !# d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 E* state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 D$ WriteEnable $end
$var wire 1 $$ ReadEnable1 $end
$var wire 1 4$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 F* Q $end

$scope module DFF $end
$var wire 1 F* q $end
$var wire 1 ~" d $end
$var wire 1 D$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 G* state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 C$ WriteReg $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 H* Q $end

$scope module DFF $end
$var wire 1 H* q $end
$var wire 1 /# d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 I* state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 J* Q $end

$scope module DFF $end
$var wire 1 J* q $end
$var wire 1 .# d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 K* state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 L* Q $end

$scope module DFF $end
$var wire 1 L* q $end
$var wire 1 -# d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 M* state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 N* Q $end

$scope module DFF $end
$var wire 1 N* q $end
$var wire 1 ,# d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 O* state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 P* Q $end

$scope module DFF $end
$var wire 1 P* q $end
$var wire 1 +# d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 Q* state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 R* Q $end

$scope module DFF $end
$var wire 1 R* q $end
$var wire 1 *# d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 S* state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 T* Q $end

$scope module DFF $end
$var wire 1 T* q $end
$var wire 1 )# d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 U* state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 V* Q $end

$scope module DFF $end
$var wire 1 V* q $end
$var wire 1 (# d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 W* state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 X* Q $end

$scope module DFF $end
$var wire 1 X* q $end
$var wire 1 '# d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 Y* state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 Z* Q $end

$scope module DFF $end
$var wire 1 Z* q $end
$var wire 1 &# d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 [* state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 \* Q $end

$scope module DFF $end
$var wire 1 \* q $end
$var wire 1 %# d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 ]* state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 ^* Q $end

$scope module DFF $end
$var wire 1 ^* q $end
$var wire 1 $# d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 _* state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 `* Q $end

$scope module DFF $end
$var wire 1 `* q $end
$var wire 1 ## d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 a* state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 b* Q $end

$scope module DFF $end
$var wire 1 b* q $end
$var wire 1 "# d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 c* state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 d* Q $end

$scope module DFF $end
$var wire 1 d* q $end
$var wire 1 !# d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 e* state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 C$ WriteEnable $end
$var wire 1 #$ ReadEnable1 $end
$var wire 1 3$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 f* Q $end

$scope module DFF $end
$var wire 1 f* q $end
$var wire 1 ~" d $end
$var wire 1 C$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 g* state $end
$upscope $end
$upscope $end
$upscope $end

$scope module register_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 B$ WriteReg $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 b$ Bitline2 [15] $end
$var wire 1 c$ Bitline2 [14] $end
$var wire 1 d$ Bitline2 [13] $end
$var wire 1 e$ Bitline2 [12] $end
$var wire 1 f$ Bitline2 [11] $end
$var wire 1 g$ Bitline2 [10] $end
$var wire 1 h$ Bitline2 [9] $end
$var wire 1 i$ Bitline2 [8] $end
$var wire 1 j$ Bitline2 [7] $end
$var wire 1 k$ Bitline2 [6] $end
$var wire 1 l$ Bitline2 [5] $end
$var wire 1 m$ Bitline2 [4] $end
$var wire 1 n$ Bitline2 [3] $end
$var wire 1 o$ Bitline2 [2] $end
$var wire 1 p$ Bitline2 [1] $end
$var wire 1 q$ Bitline2 [0] $end

$scope module bitcell_0 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 /# D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 q$ Bitline2 $end
$var wire 1 h* Q $end

$scope module DFF $end
$var wire 1 h* q $end
$var wire 1 /# d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 i* state $end
$upscope $end
$upscope $end

$scope module bitcell_1 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 .# D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 p$ Bitline2 $end
$var wire 1 j* Q $end

$scope module DFF $end
$var wire 1 j* q $end
$var wire 1 .# d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 k* state $end
$upscope $end
$upscope $end

$scope module bitcell_2 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 -# D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 o$ Bitline2 $end
$var wire 1 l* Q $end

$scope module DFF $end
$var wire 1 l* q $end
$var wire 1 -# d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 m* state $end
$upscope $end
$upscope $end

$scope module bitcell_3 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ,# D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 n$ Bitline2 $end
$var wire 1 n* Q $end

$scope module DFF $end
$var wire 1 n* q $end
$var wire 1 ,# d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 o* state $end
$upscope $end
$upscope $end

$scope module bitcell_4 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 +# D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 m$ Bitline2 $end
$var wire 1 p* Q $end

$scope module DFF $end
$var wire 1 p* q $end
$var wire 1 +# d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 q* state $end
$upscope $end
$upscope $end

$scope module bitcell_5 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 *# D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 l$ Bitline2 $end
$var wire 1 r* Q $end

$scope module DFF $end
$var wire 1 r* q $end
$var wire 1 *# d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 s* state $end
$upscope $end
$upscope $end

$scope module bitcell_6 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 )# D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 k$ Bitline2 $end
$var wire 1 t* Q $end

$scope module DFF $end
$var wire 1 t* q $end
$var wire 1 )# d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 u* state $end
$upscope $end
$upscope $end

$scope module bitcell_7 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 (# D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 j$ Bitline2 $end
$var wire 1 v* Q $end

$scope module DFF $end
$var wire 1 v* q $end
$var wire 1 (# d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 w* state $end
$upscope $end
$upscope $end

$scope module bitcell_8 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 '# D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 i$ Bitline2 $end
$var wire 1 x* Q $end

$scope module DFF $end
$var wire 1 x* q $end
$var wire 1 '# d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 y* state $end
$upscope $end
$upscope $end

$scope module bitcell_9 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 &# D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 h$ Bitline2 $end
$var wire 1 z* Q $end

$scope module DFF $end
$var wire 1 z* q $end
$var wire 1 &# d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 {* state $end
$upscope $end
$upscope $end

$scope module bitcell_10 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 %# D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 g$ Bitline2 $end
$var wire 1 |* Q $end

$scope module DFF $end
$var wire 1 |* q $end
$var wire 1 %# d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 }* state $end
$upscope $end
$upscope $end

$scope module bitcell_11 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 $# D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 f$ Bitline2 $end
$var wire 1 ~* Q $end

$scope module DFF $end
$var wire 1 ~* q $end
$var wire 1 $# d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 !+ state $end
$upscope $end
$upscope $end

$scope module bitcell_12 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ## D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 e$ Bitline2 $end
$var wire 1 "+ Q $end

$scope module DFF $end
$var wire 1 "+ q $end
$var wire 1 ## d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 #+ state $end
$upscope $end
$upscope $end

$scope module bitcell_13 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 "# D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 d$ Bitline2 $end
$var wire 1 $+ Q $end

$scope module DFF $end
$var wire 1 $+ q $end
$var wire 1 "# d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 %+ state $end
$upscope $end
$upscope $end

$scope module bitcell_14 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 !# D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 c$ Bitline2 $end
$var wire 1 &+ Q $end

$scope module DFF $end
$var wire 1 &+ q $end
$var wire 1 !# d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 '+ state $end
$upscope $end
$upscope $end

$scope module bitcell_15 $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var wire 1 ~" D $end
$var wire 1 B$ WriteEnable $end
$var wire 1 "$ ReadEnable1 $end
$var wire 1 2$ ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 b$ Bitline2 $end
$var wire 1 (+ Q $end

$scope module DFF $end
$var wire 1 (+ q $end
$var wire 1 ~" d $end
$var wire 1 B$ wen $end
$var wire 1 !! clk $end
$var wire 1 !$ rst $end
$var reg 1 )+ state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module pc_control $end
$var wire 1 *+ C [2] $end
$var wire 1 ++ C [1] $end
$var wire 1 ,+ C [0] $end
$var wire 1 -+ I [8] $end
$var wire 1 .+ I [7] $end
$var wire 1 /+ I [6] $end
$var wire 1 0+ I [5] $end
$var wire 1 1+ I [4] $end
$var wire 1 2+ I [3] $end
$var wire 1 3+ I [2] $end
$var wire 1 4+ I [1] $end
$var wire 1 5+ I [0] $end
$var wire 1 P# F [2] $end
$var wire 1 Q# F [1] $end
$var wire 1 R# F [0] $end
$var wire 1 6+ PC_in [15] $end
$var wire 1 7+ PC_in [14] $end
$var wire 1 8+ PC_in [13] $end
$var wire 1 9+ PC_in [12] $end
$var wire 1 :+ PC_in [11] $end
$var wire 1 ;+ PC_in [10] $end
$var wire 1 <+ PC_in [9] $end
$var wire 1 =+ PC_in [8] $end
$var wire 1 >+ PC_in [7] $end
$var wire 1 ?+ PC_in [6] $end
$var wire 1 @+ PC_in [5] $end
$var wire 1 A+ PC_in [4] $end
$var wire 1 B+ PC_in [3] $end
$var wire 1 C+ PC_in [2] $end
$var wire 1 D+ PC_in [1] $end
$var wire 1 E+ PC_in [0] $end
$var wire 1 u! rs_data [15] $end
$var wire 1 v! rs_data [14] $end
$var wire 1 w! rs_data [13] $end
$var wire 1 x! rs_data [12] $end
$var wire 1 y! rs_data [11] $end
$var wire 1 z! rs_data [10] $end
$var wire 1 {! rs_data [9] $end
$var wire 1 |! rs_data [8] $end
$var wire 1 }! rs_data [7] $end
$var wire 1 ~! rs_data [6] $end
$var wire 1 !" rs_data [5] $end
$var wire 1 "" rs_data [4] $end
$var wire 1 #" rs_data [3] $end
$var wire 1 $" rs_data [2] $end
$var wire 1 %" rs_data [1] $end
$var wire 1 &" rs_data [0] $end
$var wire 1 E! opcode [3] $end
$var wire 1 F! opcode [2] $end
$var wire 1 G! opcode [1] $end
$var wire 1 H! opcode [0] $end
$var wire 1 ^" PC_out [15] $end
$var wire 1 _" PC_out [14] $end
$var wire 1 `" PC_out [13] $end
$var wire 1 a" PC_out [12] $end
$var wire 1 b" PC_out [11] $end
$var wire 1 c" PC_out [10] $end
$var wire 1 d" PC_out [9] $end
$var wire 1 e" PC_out [8] $end
$var wire 1 f" PC_out [7] $end
$var wire 1 g" PC_out [6] $end
$var wire 1 h" PC_out [5] $end
$var wire 1 i" PC_out [4] $end
$var wire 1 j" PC_out [3] $end
$var wire 1 k" PC_out [2] $end
$var wire 1 l" PC_out [1] $end
$var wire 1 m" PC_out [0] $end
$var wire 1 F+ branch_imm_sign_ext [15] $end
$var wire 1 G+ branch_imm_sign_ext [14] $end
$var wire 1 H+ branch_imm_sign_ext [13] $end
$var wire 1 I+ branch_imm_sign_ext [12] $end
$var wire 1 J+ branch_imm_sign_ext [11] $end
$var wire 1 K+ branch_imm_sign_ext [10] $end
$var wire 1 L+ branch_imm_sign_ext [9] $end
$var wire 1 M+ branch_imm_sign_ext [8] $end
$var wire 1 N+ branch_imm_sign_ext [7] $end
$var wire 1 O+ branch_imm_sign_ext [6] $end
$var wire 1 P+ branch_imm_sign_ext [5] $end
$var wire 1 Q+ branch_imm_sign_ext [4] $end
$var wire 1 R+ branch_imm_sign_ext [3] $end
$var wire 1 S+ branch_imm_sign_ext [2] $end
$var wire 1 T+ branch_imm_sign_ext [1] $end
$var wire 1 U+ branch_imm_sign_ext [0] $end
$var wire 1 V+ branch_imm [15] $end
$var wire 1 W+ branch_imm [14] $end
$var wire 1 X+ branch_imm [13] $end
$var wire 1 Y+ branch_imm [12] $end
$var wire 1 Z+ branch_imm [11] $end
$var wire 1 [+ branch_imm [10] $end
$var wire 1 \+ branch_imm [9] $end
$var wire 1 ]+ branch_imm [8] $end
$var wire 1 ^+ branch_imm [7] $end
$var wire 1 _+ branch_imm [6] $end
$var wire 1 `+ branch_imm [5] $end
$var wire 1 a+ branch_imm [4] $end
$var wire 1 b+ branch_imm [3] $end
$var wire 1 c+ branch_imm [2] $end
$var wire 1 d+ branch_imm [1] $end
$var wire 1 e+ branch_imm [0] $end
$var wire 1 f+ new_pc [15] $end
$var wire 1 g+ new_pc [14] $end
$var wire 1 h+ new_pc [13] $end
$var wire 1 i+ new_pc [12] $end
$var wire 1 j+ new_pc [11] $end
$var wire 1 k+ new_pc [10] $end
$var wire 1 l+ new_pc [9] $end
$var wire 1 m+ new_pc [8] $end
$var wire 1 n+ new_pc [7] $end
$var wire 1 o+ new_pc [6] $end
$var wire 1 p+ new_pc [5] $end
$var wire 1 q+ new_pc [4] $end
$var wire 1 r+ new_pc [3] $end
$var wire 1 s+ new_pc [2] $end
$var wire 1 t+ new_pc [1] $end
$var wire 1 u+ new_pc [0] $end
$var wire 1 v+ b_pc [15] $end
$var wire 1 w+ b_pc [14] $end
$var wire 1 x+ b_pc [13] $end
$var wire 1 y+ b_pc [12] $end
$var wire 1 z+ b_pc [11] $end
$var wire 1 {+ b_pc [10] $end
$var wire 1 |+ b_pc [9] $end
$var wire 1 }+ b_pc [8] $end
$var wire 1 ~+ b_pc [7] $end
$var wire 1 !, b_pc [6] $end
$var wire 1 ", b_pc [5] $end
$var wire 1 #, b_pc [4] $end
$var wire 1 $, b_pc [3] $end
$var wire 1 %, b_pc [2] $end
$var wire 1 &, b_pc [1] $end
$var wire 1 ', b_pc [0] $end
$var wire 1 (, br_pc [15] $end
$var wire 1 ), br_pc [14] $end
$var wire 1 *, br_pc [13] $end
$var wire 1 +, br_pc [12] $end
$var wire 1 ,, br_pc [11] $end
$var wire 1 -, br_pc [10] $end
$var wire 1 ., br_pc [9] $end
$var wire 1 /, br_pc [8] $end
$var wire 1 0, br_pc [7] $end
$var wire 1 1, br_pc [6] $end
$var wire 1 2, br_pc [5] $end
$var wire 1 3, br_pc [4] $end
$var wire 1 4, br_pc [3] $end
$var wire 1 5, br_pc [2] $end
$var wire 1 6, br_pc [1] $end
$var wire 1 7, br_pc [0] $end
$var wire 1 8, Z_flag $end
$var wire 1 9, V_flag $end
$var wire 1 :, N_flag $end
$var reg 1 ;, Branch $end
$var wire 1 <, error $end
$var wire 1 =, cout $end

$scope module cla_b_pc $end
$var wire 1 6+ A [15] $end
$var wire 1 7+ A [14] $end
$var wire 1 8+ A [13] $end
$var wire 1 9+ A [12] $end
$var wire 1 :+ A [11] $end
$var wire 1 ;+ A [10] $end
$var wire 1 <+ A [9] $end
$var wire 1 =+ A [8] $end
$var wire 1 >+ A [7] $end
$var wire 1 ?+ A [6] $end
$var wire 1 @+ A [5] $end
$var wire 1 A+ A [4] $end
$var wire 1 B+ A [3] $end
$var wire 1 C+ A [2] $end
$var wire 1 D+ A [1] $end
$var wire 1 E+ A [0] $end
$var wire 1 >, B [15] $end
$var wire 1 ?, B [14] $end
$var wire 1 @, B [13] $end
$var wire 1 A, B [12] $end
$var wire 1 B, B [11] $end
$var wire 1 C, B [10] $end
$var wire 1 D, B [9] $end
$var wire 1 E, B [8] $end
$var wire 1 F, B [7] $end
$var wire 1 G, B [6] $end
$var wire 1 H, B [5] $end
$var wire 1 I, B [4] $end
$var wire 1 J, B [3] $end
$var wire 1 K, B [2] $end
$var wire 1 L, B [1] $end
$var wire 1 M, B [0] $end
$var wire 1 N, Sub $end
$var wire 1 f+ S [15] $end
$var wire 1 g+ S [14] $end
$var wire 1 h+ S [13] $end
$var wire 1 i+ S [12] $end
$var wire 1 j+ S [11] $end
$var wire 1 k+ S [10] $end
$var wire 1 l+ S [9] $end
$var wire 1 m+ S [8] $end
$var wire 1 n+ S [7] $end
$var wire 1 o+ S [6] $end
$var wire 1 p+ S [5] $end
$var wire 1 q+ S [4] $end
$var wire 1 r+ S [3] $end
$var wire 1 s+ S [2] $end
$var wire 1 t+ S [1] $end
$var wire 1 u+ S [0] $end
$var wire 1 =, Cout $end
$var wire 1 <, Ovfl $end
$var wire 1 O, C0 $end
$var wire 1 P, C1 $end
$var wire 1 Q, C2 $end
$var wire 1 R, overflow_pos $end
$var wire 1 S, overflow_neg $end
$var wire 1 T, new_B [15] $end
$var wire 1 U, new_B [14] $end
$var wire 1 V, new_B [13] $end
$var wire 1 W, new_B [12] $end
$var wire 1 X, new_B [11] $end
$var wire 1 Y, new_B [10] $end
$var wire 1 Z, new_B [9] $end
$var wire 1 [, new_B [8] $end
$var wire 1 \, new_B [7] $end
$var wire 1 ], new_B [6] $end
$var wire 1 ^, new_B [5] $end
$var wire 1 _, new_B [4] $end
$var wire 1 `, new_B [3] $end
$var wire 1 a, new_B [2] $end
$var wire 1 b, new_B [1] $end
$var wire 1 c, new_B [0] $end
$var wire 1 d, Sum [15] $end
$var wire 1 e, Sum [14] $end
$var wire 1 f, Sum [13] $end
$var wire 1 g, Sum [12] $end
$var wire 1 h, Sum [11] $end
$var wire 1 i, Sum [10] $end
$var wire 1 j, Sum [9] $end
$var wire 1 k, Sum [8] $end
$var wire 1 l, Sum [7] $end
$var wire 1 m, Sum [6] $end
$var wire 1 n, Sum [5] $end
$var wire 1 o, Sum [4] $end
$var wire 1 p, Sum [3] $end
$var wire 1 q, Sum [2] $end
$var wire 1 r, Sum [1] $end
$var wire 1 s, Sum [0] $end

$scope module add3_0 $end
$var wire 1 B+ A [3] $end
$var wire 1 C+ A [2] $end
$var wire 1 D+ A [1] $end
$var wire 1 E+ A [0] $end
$var wire 1 `, B [3] $end
$var wire 1 a, B [2] $end
$var wire 1 b, B [1] $end
$var wire 1 c, B [0] $end
$var wire 1 N, Cin $end
$var wire 1 p, S [3] $end
$var wire 1 q, S [2] $end
$var wire 1 r, S [1] $end
$var wire 1 s, S [0] $end
$var wire 1 O, Cout $end
$var wire 1 t, P [3] $end
$var wire 1 u, P [2] $end
$var wire 1 v, P [1] $end
$var wire 1 w, P [0] $end
$var wire 1 x, G [3] $end
$var wire 1 y, G [2] $end
$var wire 1 z, G [1] $end
$var wire 1 {, G [0] $end
$var wire 1 |, C [4] $end
$var wire 1 }, C [3] $end
$var wire 1 ~, C [2] $end
$var wire 1 !- C [1] $end
$var wire 1 "- C [0] $end
$upscope $end

$scope module add7_4 $end
$var wire 1 >+ A [3] $end
$var wire 1 ?+ A [2] $end
$var wire 1 @+ A [1] $end
$var wire 1 A+ A [0] $end
$var wire 1 \, B [3] $end
$var wire 1 ], B [2] $end
$var wire 1 ^, B [1] $end
$var wire 1 _, B [0] $end
$var wire 1 O, Cin $end
$var wire 1 l, S [3] $end
$var wire 1 m, S [2] $end
$var wire 1 n, S [1] $end
$var wire 1 o, S [0] $end
$var wire 1 P, Cout $end
$var wire 1 #- P [3] $end
$var wire 1 $- P [2] $end
$var wire 1 %- P [1] $end
$var wire 1 &- P [0] $end
$var wire 1 '- G [3] $end
$var wire 1 (- G [2] $end
$var wire 1 )- G [1] $end
$var wire 1 *- G [0] $end
$var wire 1 +- C [4] $end
$var wire 1 ,- C [3] $end
$var wire 1 -- C [2] $end
$var wire 1 .- C [1] $end
$var wire 1 /- C [0] $end
$upscope $end

$scope module add11_8 $end
$var wire 1 :+ A [3] $end
$var wire 1 ;+ A [2] $end
$var wire 1 <+ A [1] $end
$var wire 1 =+ A [0] $end
$var wire 1 X, B [3] $end
$var wire 1 Y, B [2] $end
$var wire 1 Z, B [1] $end
$var wire 1 [, B [0] $end
$var wire 1 P, Cin $end
$var wire 1 h, S [3] $end
$var wire 1 i, S [2] $end
$var wire 1 j, S [1] $end
$var wire 1 k, S [0] $end
$var wire 1 Q, Cout $end
$var wire 1 0- P [3] $end
$var wire 1 1- P [2] $end
$var wire 1 2- P [1] $end
$var wire 1 3- P [0] $end
$var wire 1 4- G [3] $end
$var wire 1 5- G [2] $end
$var wire 1 6- G [1] $end
$var wire 1 7- G [0] $end
$var wire 1 8- C [4] $end
$var wire 1 9- C [3] $end
$var wire 1 :- C [2] $end
$var wire 1 ;- C [1] $end
$var wire 1 <- C [0] $end
$upscope $end

$scope module add15_12 $end
$var wire 1 6+ A [3] $end
$var wire 1 7+ A [2] $end
$var wire 1 8+ A [1] $end
$var wire 1 9+ A [0] $end
$var wire 1 T, B [3] $end
$var wire 1 U, B [2] $end
$var wire 1 V, B [1] $end
$var wire 1 W, B [0] $end
$var wire 1 Q, Cin $end
$var wire 1 d, S [3] $end
$var wire 1 e, S [2] $end
$var wire 1 f, S [1] $end
$var wire 1 g, S [0] $end
$var wire 1 =, Cout $end
$var wire 1 =- P [3] $end
$var wire 1 >- P [2] $end
$var wire 1 ?- P [1] $end
$var wire 1 @- P [0] $end
$var wire 1 A- G [3] $end
$var wire 1 B- G [2] $end
$var wire 1 C- G [1] $end
$var wire 1 D- G [0] $end
$var wire 1 E- C [4] $end
$var wire 1 F- C [3] $end
$var wire 1 G- C [2] $end
$var wire 1 H- C [1] $end
$var wire 1 I- C [0] $end
$upscope $end
$upscope $end

$scope module cla_branch $end
$var wire 1 f+ A [15] $end
$var wire 1 g+ A [14] $end
$var wire 1 h+ A [13] $end
$var wire 1 i+ A [12] $end
$var wire 1 j+ A [11] $end
$var wire 1 k+ A [10] $end
$var wire 1 l+ A [9] $end
$var wire 1 m+ A [8] $end
$var wire 1 n+ A [7] $end
$var wire 1 o+ A [6] $end
$var wire 1 p+ A [5] $end
$var wire 1 q+ A [4] $end
$var wire 1 r+ A [3] $end
$var wire 1 s+ A [2] $end
$var wire 1 t+ A [1] $end
$var wire 1 u+ A [0] $end
$var wire 1 V+ B [15] $end
$var wire 1 W+ B [14] $end
$var wire 1 X+ B [13] $end
$var wire 1 Y+ B [12] $end
$var wire 1 Z+ B [11] $end
$var wire 1 [+ B [10] $end
$var wire 1 \+ B [9] $end
$var wire 1 ]+ B [8] $end
$var wire 1 ^+ B [7] $end
$var wire 1 _+ B [6] $end
$var wire 1 `+ B [5] $end
$var wire 1 a+ B [4] $end
$var wire 1 b+ B [3] $end
$var wire 1 c+ B [2] $end
$var wire 1 d+ B [1] $end
$var wire 1 e+ B [0] $end
$var wire 1 J- Sub $end
$var wire 1 v+ S [15] $end
$var wire 1 w+ S [14] $end
$var wire 1 x+ S [13] $end
$var wire 1 y+ S [12] $end
$var wire 1 z+ S [11] $end
$var wire 1 {+ S [10] $end
$var wire 1 |+ S [9] $end
$var wire 1 }+ S [8] $end
$var wire 1 ~+ S [7] $end
$var wire 1 !, S [6] $end
$var wire 1 ", S [5] $end
$var wire 1 #, S [4] $end
$var wire 1 $, S [3] $end
$var wire 1 %, S [2] $end
$var wire 1 &, S [1] $end
$var wire 1 ', S [0] $end
$var wire 1 =, Cout $end
$var wire 1 <, Ovfl $end
$var wire 1 K- C0 $end
$var wire 1 L- C1 $end
$var wire 1 M- C2 $end
$var wire 1 N- overflow_pos $end
$var wire 1 O- overflow_neg $end
$var wire 1 P- new_B [15] $end
$var wire 1 Q- new_B [14] $end
$var wire 1 R- new_B [13] $end
$var wire 1 S- new_B [12] $end
$var wire 1 T- new_B [11] $end
$var wire 1 U- new_B [10] $end
$var wire 1 V- new_B [9] $end
$var wire 1 W- new_B [8] $end
$var wire 1 X- new_B [7] $end
$var wire 1 Y- new_B [6] $end
$var wire 1 Z- new_B [5] $end
$var wire 1 [- new_B [4] $end
$var wire 1 \- new_B [3] $end
$var wire 1 ]- new_B [2] $end
$var wire 1 ^- new_B [1] $end
$var wire 1 _- new_B [0] $end
$var wire 1 `- Sum [15] $end
$var wire 1 a- Sum [14] $end
$var wire 1 b- Sum [13] $end
$var wire 1 c- Sum [12] $end
$var wire 1 d- Sum [11] $end
$var wire 1 e- Sum [10] $end
$var wire 1 f- Sum [9] $end
$var wire 1 g- Sum [8] $end
$var wire 1 h- Sum [7] $end
$var wire 1 i- Sum [6] $end
$var wire 1 j- Sum [5] $end
$var wire 1 k- Sum [4] $end
$var wire 1 l- Sum [3] $end
$var wire 1 m- Sum [2] $end
$var wire 1 n- Sum [1] $end
$var wire 1 o- Sum [0] $end

$scope module add3_0 $end
$var wire 1 r+ A [3] $end
$var wire 1 s+ A [2] $end
$var wire 1 t+ A [1] $end
$var wire 1 u+ A [0] $end
$var wire 1 \- B [3] $end
$var wire 1 ]- B [2] $end
$var wire 1 ^- B [1] $end
$var wire 1 _- B [0] $end
$var wire 1 J- Cin $end
$var wire 1 l- S [3] $end
$var wire 1 m- S [2] $end
$var wire 1 n- S [1] $end
$var wire 1 o- S [0] $end
$var wire 1 K- Cout $end
$var wire 1 p- P [3] $end
$var wire 1 q- P [2] $end
$var wire 1 r- P [1] $end
$var wire 1 s- P [0] $end
$var wire 1 t- G [3] $end
$var wire 1 u- G [2] $end
$var wire 1 v- G [1] $end
$var wire 1 w- G [0] $end
$var wire 1 x- C [4] $end
$var wire 1 y- C [3] $end
$var wire 1 z- C [2] $end
$var wire 1 {- C [1] $end
$var wire 1 |- C [0] $end
$upscope $end

$scope module add7_4 $end
$var wire 1 n+ A [3] $end
$var wire 1 o+ A [2] $end
$var wire 1 p+ A [1] $end
$var wire 1 q+ A [0] $end
$var wire 1 X- B [3] $end
$var wire 1 Y- B [2] $end
$var wire 1 Z- B [1] $end
$var wire 1 [- B [0] $end
$var wire 1 K- Cin $end
$var wire 1 h- S [3] $end
$var wire 1 i- S [2] $end
$var wire 1 j- S [1] $end
$var wire 1 k- S [0] $end
$var wire 1 L- Cout $end
$var wire 1 }- P [3] $end
$var wire 1 ~- P [2] $end
$var wire 1 !. P [1] $end
$var wire 1 ". P [0] $end
$var wire 1 #. G [3] $end
$var wire 1 $. G [2] $end
$var wire 1 %. G [1] $end
$var wire 1 &. G [0] $end
$var wire 1 '. C [4] $end
$var wire 1 (. C [3] $end
$var wire 1 ). C [2] $end
$var wire 1 *. C [1] $end
$var wire 1 +. C [0] $end
$upscope $end

$scope module add11_8 $end
$var wire 1 j+ A [3] $end
$var wire 1 k+ A [2] $end
$var wire 1 l+ A [1] $end
$var wire 1 m+ A [0] $end
$var wire 1 T- B [3] $end
$var wire 1 U- B [2] $end
$var wire 1 V- B [1] $end
$var wire 1 W- B [0] $end
$var wire 1 L- Cin $end
$var wire 1 d- S [3] $end
$var wire 1 e- S [2] $end
$var wire 1 f- S [1] $end
$var wire 1 g- S [0] $end
$var wire 1 M- Cout $end
$var wire 1 ,. P [3] $end
$var wire 1 -. P [2] $end
$var wire 1 .. P [1] $end
$var wire 1 /. P [0] $end
$var wire 1 0. G [3] $end
$var wire 1 1. G [2] $end
$var wire 1 2. G [1] $end
$var wire 1 3. G [0] $end
$var wire 1 4. C [4] $end
$var wire 1 5. C [3] $end
$var wire 1 6. C [2] $end
$var wire 1 7. C [1] $end
$var wire 1 8. C [0] $end
$upscope $end

$scope module add15_12 $end
$var wire 1 f+ A [3] $end
$var wire 1 g+ A [2] $end
$var wire 1 h+ A [1] $end
$var wire 1 i+ A [0] $end
$var wire 1 P- B [3] $end
$var wire 1 Q- B [2] $end
$var wire 1 R- B [1] $end
$var wire 1 S- B [0] $end
$var wire 1 M- Cin $end
$var wire 1 `- S [3] $end
$var wire 1 a- S [2] $end
$var wire 1 b- S [1] $end
$var wire 1 c- S [0] $end
$var wire 1 =, Cout $end
$var wire 1 9. P [3] $end
$var wire 1 :. P [2] $end
$var wire 1 ;. P [1] $end
$var wire 1 <. P [0] $end
$var wire 1 =. G [3] $end
$var wire 1 >. G [2] $end
$var wire 1 ?. G [1] $end
$var wire 1 @. G [0] $end
$var wire 1 A. C [4] $end
$var wire 1 B. C [3] $end
$var wire 1 C. C [2] $end
$var wire 1 D. C [1] $end
$var wire 1 E. C [0] $end
$upscope $end
$upscope $end

$scope module cla_br_pc $end
$var wire 1 6+ A [15] $end
$var wire 1 7+ A [14] $end
$var wire 1 8+ A [13] $end
$var wire 1 9+ A [12] $end
$var wire 1 :+ A [11] $end
$var wire 1 ;+ A [10] $end
$var wire 1 <+ A [9] $end
$var wire 1 =+ A [8] $end
$var wire 1 >+ A [7] $end
$var wire 1 ?+ A [6] $end
$var wire 1 @+ A [5] $end
$var wire 1 A+ A [4] $end
$var wire 1 B+ A [3] $end
$var wire 1 C+ A [2] $end
$var wire 1 D+ A [1] $end
$var wire 1 E+ A [0] $end
$var wire 1 u! B [15] $end
$var wire 1 v! B [14] $end
$var wire 1 w! B [13] $end
$var wire 1 x! B [12] $end
$var wire 1 y! B [11] $end
$var wire 1 z! B [10] $end
$var wire 1 {! B [9] $end
$var wire 1 |! B [8] $end
$var wire 1 }! B [7] $end
$var wire 1 ~! B [6] $end
$var wire 1 !" B [5] $end
$var wire 1 "" B [4] $end
$var wire 1 #" B [3] $end
$var wire 1 $" B [2] $end
$var wire 1 %" B [1] $end
$var wire 1 &" B [0] $end
$var wire 1 F. Sub $end
$var wire 1 (, S [15] $end
$var wire 1 ), S [14] $end
$var wire 1 *, S [13] $end
$var wire 1 +, S [12] $end
$var wire 1 ,, S [11] $end
$var wire 1 -, S [10] $end
$var wire 1 ., S [9] $end
$var wire 1 /, S [8] $end
$var wire 1 0, S [7] $end
$var wire 1 1, S [6] $end
$var wire 1 2, S [5] $end
$var wire 1 3, S [4] $end
$var wire 1 4, S [3] $end
$var wire 1 5, S [2] $end
$var wire 1 6, S [1] $end
$var wire 1 7, S [0] $end
$var wire 1 =, Cout $end
$var wire 1 <, Ovfl $end
$var wire 1 G. C0 $end
$var wire 1 H. C1 $end
$var wire 1 I. C2 $end
$var wire 1 J. overflow_pos $end
$var wire 1 K. overflow_neg $end
$var wire 1 L. new_B [15] $end
$var wire 1 M. new_B [14] $end
$var wire 1 N. new_B [13] $end
$var wire 1 O. new_B [12] $end
$var wire 1 P. new_B [11] $end
$var wire 1 Q. new_B [10] $end
$var wire 1 R. new_B [9] $end
$var wire 1 S. new_B [8] $end
$var wire 1 T. new_B [7] $end
$var wire 1 U. new_B [6] $end
$var wire 1 V. new_B [5] $end
$var wire 1 W. new_B [4] $end
$var wire 1 X. new_B [3] $end
$var wire 1 Y. new_B [2] $end
$var wire 1 Z. new_B [1] $end
$var wire 1 [. new_B [0] $end
$var wire 1 \. Sum [15] $end
$var wire 1 ]. Sum [14] $end
$var wire 1 ^. Sum [13] $end
$var wire 1 _. Sum [12] $end
$var wire 1 `. Sum [11] $end
$var wire 1 a. Sum [10] $end
$var wire 1 b. Sum [9] $end
$var wire 1 c. Sum [8] $end
$var wire 1 d. Sum [7] $end
$var wire 1 e. Sum [6] $end
$var wire 1 f. Sum [5] $end
$var wire 1 g. Sum [4] $end
$var wire 1 h. Sum [3] $end
$var wire 1 i. Sum [2] $end
$var wire 1 j. Sum [1] $end
$var wire 1 k. Sum [0] $end

$scope module add3_0 $end
$var wire 1 B+ A [3] $end
$var wire 1 C+ A [2] $end
$var wire 1 D+ A [1] $end
$var wire 1 E+ A [0] $end
$var wire 1 X. B [3] $end
$var wire 1 Y. B [2] $end
$var wire 1 Z. B [1] $end
$var wire 1 [. B [0] $end
$var wire 1 F. Cin $end
$var wire 1 h. S [3] $end
$var wire 1 i. S [2] $end
$var wire 1 j. S [1] $end
$var wire 1 k. S [0] $end
$var wire 1 G. Cout $end
$var wire 1 l. P [3] $end
$var wire 1 m. P [2] $end
$var wire 1 n. P [1] $end
$var wire 1 o. P [0] $end
$var wire 1 p. G [3] $end
$var wire 1 q. G [2] $end
$var wire 1 r. G [1] $end
$var wire 1 s. G [0] $end
$var wire 1 t. C [4] $end
$var wire 1 u. C [3] $end
$var wire 1 v. C [2] $end
$var wire 1 w. C [1] $end
$var wire 1 x. C [0] $end
$upscope $end

$scope module add7_4 $end
$var wire 1 >+ A [3] $end
$var wire 1 ?+ A [2] $end
$var wire 1 @+ A [1] $end
$var wire 1 A+ A [0] $end
$var wire 1 T. B [3] $end
$var wire 1 U. B [2] $end
$var wire 1 V. B [1] $end
$var wire 1 W. B [0] $end
$var wire 1 G. Cin $end
$var wire 1 d. S [3] $end
$var wire 1 e. S [2] $end
$var wire 1 f. S [1] $end
$var wire 1 g. S [0] $end
$var wire 1 H. Cout $end
$var wire 1 y. P [3] $end
$var wire 1 z. P [2] $end
$var wire 1 {. P [1] $end
$var wire 1 |. P [0] $end
$var wire 1 }. G [3] $end
$var wire 1 ~. G [2] $end
$var wire 1 !/ G [1] $end
$var wire 1 "/ G [0] $end
$var wire 1 #/ C [4] $end
$var wire 1 $/ C [3] $end
$var wire 1 %/ C [2] $end
$var wire 1 &/ C [1] $end
$var wire 1 '/ C [0] $end
$upscope $end

$scope module add11_8 $end
$var wire 1 :+ A [3] $end
$var wire 1 ;+ A [2] $end
$var wire 1 <+ A [1] $end
$var wire 1 =+ A [0] $end
$var wire 1 P. B [3] $end
$var wire 1 Q. B [2] $end
$var wire 1 R. B [1] $end
$var wire 1 S. B [0] $end
$var wire 1 H. Cin $end
$var wire 1 `. S [3] $end
$var wire 1 a. S [2] $end
$var wire 1 b. S [1] $end
$var wire 1 c. S [0] $end
$var wire 1 I. Cout $end
$var wire 1 (/ P [3] $end
$var wire 1 )/ P [2] $end
$var wire 1 */ P [1] $end
$var wire 1 +/ P [0] $end
$var wire 1 ,/ G [3] $end
$var wire 1 -/ G [2] $end
$var wire 1 ./ G [1] $end
$var wire 1 // G [0] $end
$var wire 1 0/ C [4] $end
$var wire 1 1/ C [3] $end
$var wire 1 2/ C [2] $end
$var wire 1 3/ C [1] $end
$var wire 1 4/ C [0] $end
$upscope $end

$scope module add15_12 $end
$var wire 1 6+ A [3] $end
$var wire 1 7+ A [2] $end
$var wire 1 8+ A [1] $end
$var wire 1 9+ A [0] $end
$var wire 1 L. B [3] $end
$var wire 1 M. B [2] $end
$var wire 1 N. B [1] $end
$var wire 1 O. B [0] $end
$var wire 1 I. Cin $end
$var wire 1 \. S [3] $end
$var wire 1 ]. S [2] $end
$var wire 1 ^. S [1] $end
$var wire 1 _. S [0] $end
$var wire 1 =, Cout $end
$var wire 1 5/ P [3] $end
$var wire 1 6/ P [2] $end
$var wire 1 7/ P [1] $end
$var wire 1 8/ P [0] $end
$var wire 1 9/ G [3] $end
$var wire 1 :/ G [2] $end
$var wire 1 ;/ G [1] $end
$var wire 1 </ G [0] $end
$var wire 1 =/ C [4] $end
$var wire 1 >/ C [3] $end
$var wire 1 ?/ C [2] $end
$var wire 1 @/ C [1] $end
$var wire 1 A/ C [0] $end
$upscope $end
$upscope $end
$upscope $end

$scope module alu $end
$var wire 1 %! A [15] $end
$var wire 1 &! A [14] $end
$var wire 1 '! A [13] $end
$var wire 1 (! A [12] $end
$var wire 1 )! A [11] $end
$var wire 1 *! A [10] $end
$var wire 1 +! A [9] $end
$var wire 1 ,! A [8] $end
$var wire 1 -! A [7] $end
$var wire 1 .! A [6] $end
$var wire 1 /! A [5] $end
$var wire 1 0! A [4] $end
$var wire 1 1! A [3] $end
$var wire 1 2! A [2] $end
$var wire 1 3! A [1] $end
$var wire 1 4! A [0] $end
$var wire 1 5! B [15] $end
$var wire 1 6! B [14] $end
$var wire 1 7! B [13] $end
$var wire 1 8! B [12] $end
$var wire 1 9! B [11] $end
$var wire 1 :! B [10] $end
$var wire 1 ;! B [9] $end
$var wire 1 <! B [8] $end
$var wire 1 =! B [7] $end
$var wire 1 >! B [6] $end
$var wire 1 ?! B [5] $end
$var wire 1 @! B [4] $end
$var wire 1 A! B [3] $end
$var wire 1 B! B [2] $end
$var wire 1 C! B [1] $end
$var wire 1 D! B [0] $end
$var wire 1 P# flag [2] $end
$var wire 1 Q# flag [1] $end
$var wire 1 R# flag [0] $end
$var wire 1 E! Opcode [3] $end
$var wire 1 F! Opcode [2] $end
$var wire 1 G! Opcode [1] $end
$var wire 1 H! Opcode [0] $end
$var wire 1 B/ imm [3] $end
$var wire 1 C/ imm [2] $end
$var wire 1 D/ imm [1] $end
$var wire 1 E/ imm [0] $end
$var reg 16 F/ ALU_Out [15:0] $end
$var wire 1 P# Z $end
$var wire 1 R# N $end
$var wire 1 Q# V $end
$var wire 1 G/ ADDSUB_out [15] $end
$var wire 1 H/ ADDSUB_out [14] $end
$var wire 1 I/ ADDSUB_out [13] $end
$var wire 1 J/ ADDSUB_out [12] $end
$var wire 1 K/ ADDSUB_out [11] $end
$var wire 1 L/ ADDSUB_out [10] $end
$var wire 1 M/ ADDSUB_out [9] $end
$var wire 1 N/ ADDSUB_out [8] $end
$var wire 1 O/ ADDSUB_out [7] $end
$var wire 1 P/ ADDSUB_out [6] $end
$var wire 1 Q/ ADDSUB_out [5] $end
$var wire 1 R/ ADDSUB_out [4] $end
$var wire 1 S/ ADDSUB_out [3] $end
$var wire 1 T/ ADDSUB_out [2] $end
$var wire 1 U/ ADDSUB_out [1] $end
$var wire 1 V/ ADDSUB_out [0] $end
$var wire 1 W/ RED_out [15] $end
$var wire 1 X/ RED_out [14] $end
$var wire 1 Y/ RED_out [13] $end
$var wire 1 Z/ RED_out [12] $end
$var wire 1 [/ RED_out [11] $end
$var wire 1 \/ RED_out [10] $end
$var wire 1 ]/ RED_out [9] $end
$var wire 1 ^/ RED_out [8] $end
$var wire 1 _/ RED_out [7] $end
$var wire 1 `/ RED_out [6] $end
$var wire 1 a/ RED_out [5] $end
$var wire 1 b/ RED_out [4] $end
$var wire 1 c/ RED_out [3] $end
$var wire 1 d/ RED_out [2] $end
$var wire 1 e/ RED_out [1] $end
$var wire 1 f/ RED_out [0] $end
$var wire 1 g/ SHIFT_out [15] $end
$var wire 1 h/ SHIFT_out [14] $end
$var wire 1 i/ SHIFT_out [13] $end
$var wire 1 j/ SHIFT_out [12] $end
$var wire 1 k/ SHIFT_out [11] $end
$var wire 1 l/ SHIFT_out [10] $end
$var wire 1 m/ SHIFT_out [9] $end
$var wire 1 n/ SHIFT_out [8] $end
$var wire 1 o/ SHIFT_out [7] $end
$var wire 1 p/ SHIFT_out [6] $end
$var wire 1 q/ SHIFT_out [5] $end
$var wire 1 r/ SHIFT_out [4] $end
$var wire 1 s/ SHIFT_out [3] $end
$var wire 1 t/ SHIFT_out [2] $end
$var wire 1 u/ SHIFT_out [1] $end
$var wire 1 v/ SHIFT_out [0] $end
$var wire 1 w/ PADDSB_out [15] $end
$var wire 1 x/ PADDSB_out [14] $end
$var wire 1 y/ PADDSB_out [13] $end
$var wire 1 z/ PADDSB_out [12] $end
$var wire 1 {/ PADDSB_out [11] $end
$var wire 1 |/ PADDSB_out [10] $end
$var wire 1 }/ PADDSB_out [9] $end
$var wire 1 ~/ PADDSB_out [8] $end
$var wire 1 !0 PADDSB_out [7] $end
$var wire 1 "0 PADDSB_out [6] $end
$var wire 1 #0 PADDSB_out [5] $end
$var wire 1 $0 PADDSB_out [4] $end
$var wire 1 %0 PADDSB_out [3] $end
$var wire 1 &0 PADDSB_out [2] $end
$var wire 1 '0 PADDSB_out [1] $end
$var wire 1 (0 PADDSB_out [0] $end
$var wire 1 )0 MEM_Addr [15] $end
$var wire 1 *0 MEM_Addr [14] $end
$var wire 1 +0 MEM_Addr [13] $end
$var wire 1 ,0 MEM_Addr [12] $end
$var wire 1 -0 MEM_Addr [11] $end
$var wire 1 .0 MEM_Addr [10] $end
$var wire 1 /0 MEM_Addr [9] $end
$var wire 1 00 MEM_Addr [8] $end
$var wire 1 10 MEM_Addr [7] $end
$var wire 1 20 MEM_Addr [6] $end
$var wire 1 30 MEM_Addr [5] $end
$var wire 1 40 MEM_Addr [4] $end
$var wire 1 50 MEM_Addr [3] $end
$var wire 1 60 MEM_Addr [2] $end
$var wire 1 70 MEM_Addr [1] $end
$var wire 1 80 MEM_Addr [0] $end
$var wire 1 90 Error $end
$var wire 1 :0 cout $end
$var reg 1 ;0 Z_temp $end
$var reg 1 <0 N_temp $end
$var reg 1 =0 V_temp $end

$scope module paddsb $end
$var wire 1 %! rs [15] $end
$var wire 1 &! rs [14] $end
$var wire 1 '! rs [13] $end
$var wire 1 (! rs [12] $end
$var wire 1 )! rs [11] $end
$var wire 1 *! rs [10] $end
$var wire 1 +! rs [9] $end
$var wire 1 ,! rs [8] $end
$var wire 1 -! rs [7] $end
$var wire 1 .! rs [6] $end
$var wire 1 /! rs [5] $end
$var wire 1 0! rs [4] $end
$var wire 1 1! rs [3] $end
$var wire 1 2! rs [2] $end
$var wire 1 3! rs [1] $end
$var wire 1 4! rs [0] $end
$var wire 1 5! rt [15] $end
$var wire 1 6! rt [14] $end
$var wire 1 7! rt [13] $end
$var wire 1 8! rt [12] $end
$var wire 1 9! rt [11] $end
$var wire 1 :! rt [10] $end
$var wire 1 ;! rt [9] $end
$var wire 1 <! rt [8] $end
$var wire 1 =! rt [7] $end
$var wire 1 >! rt [6] $end
$var wire 1 ?! rt [5] $end
$var wire 1 @! rt [4] $end
$var wire 1 A! rt [3] $end
$var wire 1 B! rt [2] $end
$var wire 1 C! rt [1] $end
$var wire 1 D! rt [0] $end
$var wire 1 w/ rd [15] $end
$var wire 1 x/ rd [14] $end
$var wire 1 y/ rd [13] $end
$var wire 1 z/ rd [12] $end
$var wire 1 {/ rd [11] $end
$var wire 1 |/ rd [10] $end
$var wire 1 }/ rd [9] $end
$var wire 1 ~/ rd [8] $end
$var wire 1 !0 rd [7] $end
$var wire 1 "0 rd [6] $end
$var wire 1 #0 rd [5] $end
$var wire 1 $0 rd [4] $end
$var wire 1 %0 rd [3] $end
$var wire 1 &0 rd [2] $end
$var wire 1 '0 rd [1] $end
$var wire 1 (0 rd [0] $end
$var wire 1 >0 Sum_1 [3] $end
$var wire 1 ?0 Sum_1 [2] $end
$var wire 1 @0 Sum_1 [1] $end
$var wire 1 A0 Sum_1 [0] $end
$var wire 1 B0 Sum_2 [3] $end
$var wire 1 C0 Sum_2 [2] $end
$var wire 1 D0 Sum_2 [1] $end
$var wire 1 E0 Sum_2 [0] $end
$var wire 1 F0 Sum_3 [3] $end
$var wire 1 G0 Sum_3 [2] $end
$var wire 1 H0 Sum_3 [1] $end
$var wire 1 I0 Sum_3 [0] $end
$var wire 1 J0 Sum_4 [3] $end
$var wire 1 K0 Sum_4 [2] $end
$var wire 1 L0 Sum_4 [1] $end
$var wire 1 M0 Sum_4 [0] $end
$var wire 1 N0 C [3] $end
$var wire 1 O0 C [2] $end
$var wire 1 P0 C [1] $end
$var wire 1 Q0 C [0] $end
$var wire 1 R0 overflow_pos [3] $end
$var wire 1 S0 overflow_pos [2] $end
$var wire 1 T0 overflow_pos [1] $end
$var wire 1 U0 overflow_pos [0] $end
$var wire 1 V0 overflow_neg [3] $end
$var wire 1 W0 overflow_neg [2] $end
$var wire 1 X0 overflow_neg [1] $end
$var wire 1 Y0 overflow_neg [0] $end

$scope module add3_0 $end
$var wire 1 1! A [3] $end
$var wire 1 2! A [2] $end
$var wire 1 3! A [1] $end
$var wire 1 4! A [0] $end
$var wire 1 A! B [3] $end
$var wire 1 B! B [2] $end
$var wire 1 C! B [1] $end
$var wire 1 D! B [0] $end
$var wire 1 Z0 Cin $end
$var wire 1 >0 S [3] $end
$var wire 1 ?0 S [2] $end
$var wire 1 @0 S [1] $end
$var wire 1 A0 S [0] $end
$var wire 1 Q0 Cout $end
$var wire 1 [0 P [3] $end
$var wire 1 \0 P [2] $end
$var wire 1 ]0 P [1] $end
$var wire 1 ^0 P [0] $end
$var wire 1 _0 G [3] $end
$var wire 1 `0 G [2] $end
$var wire 1 a0 G [1] $end
$var wire 1 b0 G [0] $end
$var wire 1 c0 C [4] $end
$var wire 1 d0 C [3] $end
$var wire 1 e0 C [2] $end
$var wire 1 f0 C [1] $end
$var wire 1 g0 C [0] $end
$upscope $end

$scope module add7_4 $end
$var wire 1 -! A [3] $end
$var wire 1 .! A [2] $end
$var wire 1 /! A [1] $end
$var wire 1 0! A [0] $end
$var wire 1 =! B [3] $end
$var wire 1 >! B [2] $end
$var wire 1 ?! B [1] $end
$var wire 1 @! B [0] $end
$var wire 1 h0 Cin $end
$var wire 1 B0 S [3] $end
$var wire 1 C0 S [2] $end
$var wire 1 D0 S [1] $end
$var wire 1 E0 S [0] $end
$var wire 1 P0 Cout $end
$var wire 1 i0 P [3] $end
$var wire 1 j0 P [2] $end
$var wire 1 k0 P [1] $end
$var wire 1 l0 P [0] $end
$var wire 1 m0 G [3] $end
$var wire 1 n0 G [2] $end
$var wire 1 o0 G [1] $end
$var wire 1 p0 G [0] $end
$var wire 1 q0 C [4] $end
$var wire 1 r0 C [3] $end
$var wire 1 s0 C [2] $end
$var wire 1 t0 C [1] $end
$var wire 1 u0 C [0] $end
$upscope $end

$scope module add11_8 $end
$var wire 1 )! A [3] $end
$var wire 1 *! A [2] $end
$var wire 1 +! A [1] $end
$var wire 1 ,! A [0] $end
$var wire 1 9! B [3] $end
$var wire 1 :! B [2] $end
$var wire 1 ;! B [1] $end
$var wire 1 <! B [0] $end
$var wire 1 v0 Cin $end
$var wire 1 F0 S [3] $end
$var wire 1 G0 S [2] $end
$var wire 1 H0 S [1] $end
$var wire 1 I0 S [0] $end
$var wire 1 O0 Cout $end
$var wire 1 w0 P [3] $end
$var wire 1 x0 P [2] $end
$var wire 1 y0 P [1] $end
$var wire 1 z0 P [0] $end
$var wire 1 {0 G [3] $end
$var wire 1 |0 G [2] $end
$var wire 1 }0 G [1] $end
$var wire 1 ~0 G [0] $end
$var wire 1 !1 C [4] $end
$var wire 1 "1 C [3] $end
$var wire 1 #1 C [2] $end
$var wire 1 $1 C [1] $end
$var wire 1 %1 C [0] $end
$upscope $end

$scope module add15_12 $end
$var wire 1 %! A [3] $end
$var wire 1 &! A [2] $end
$var wire 1 '! A [1] $end
$var wire 1 (! A [0] $end
$var wire 1 5! B [3] $end
$var wire 1 6! B [2] $end
$var wire 1 7! B [1] $end
$var wire 1 8! B [0] $end
$var wire 1 &1 Cin $end
$var wire 1 J0 S [3] $end
$var wire 1 K0 S [2] $end
$var wire 1 L0 S [1] $end
$var wire 1 M0 S [0] $end
$var wire 1 N0 Cout $end
$var wire 1 '1 P [3] $end
$var wire 1 (1 P [2] $end
$var wire 1 )1 P [1] $end
$var wire 1 *1 P [0] $end
$var wire 1 +1 G [3] $end
$var wire 1 ,1 G [2] $end
$var wire 1 -1 G [1] $end
$var wire 1 .1 G [0] $end
$var wire 1 /1 C [4] $end
$var wire 1 01 C [3] $end
$var wire 1 11 C [2] $end
$var wire 1 21 C [1] $end
$var wire 1 31 C [0] $end
$upscope $end
$upscope $end

$scope module cla_addsub $end
$var wire 1 %! A [15] $end
$var wire 1 &! A [14] $end
$var wire 1 '! A [13] $end
$var wire 1 (! A [12] $end
$var wire 1 )! A [11] $end
$var wire 1 *! A [10] $end
$var wire 1 +! A [9] $end
$var wire 1 ,! A [8] $end
$var wire 1 -! A [7] $end
$var wire 1 .! A [6] $end
$var wire 1 /! A [5] $end
$var wire 1 0! A [4] $end
$var wire 1 1! A [3] $end
$var wire 1 2! A [2] $end
$var wire 1 3! A [1] $end
$var wire 1 4! A [0] $end
$var wire 1 5! B [15] $end
$var wire 1 6! B [14] $end
$var wire 1 7! B [13] $end
$var wire 1 8! B [12] $end
$var wire 1 9! B [11] $end
$var wire 1 :! B [10] $end
$var wire 1 ;! B [9] $end
$var wire 1 <! B [8] $end
$var wire 1 =! B [7] $end
$var wire 1 >! B [6] $end
$var wire 1 ?! B [5] $end
$var wire 1 @! B [4] $end
$var wire 1 A! B [3] $end
$var wire 1 B! B [2] $end
$var wire 1 C! B [1] $end
$var wire 1 D! B [0] $end
$var wire 1 H! Sub $end
$var wire 1 G/ S [15] $end
$var wire 1 H/ S [14] $end
$var wire 1 I/ S [13] $end
$var wire 1 J/ S [12] $end
$var wire 1 K/ S [11] $end
$var wire 1 L/ S [10] $end
$var wire 1 M/ S [9] $end
$var wire 1 N/ S [8] $end
$var wire 1 O/ S [7] $end
$var wire 1 P/ S [6] $end
$var wire 1 Q/ S [5] $end
$var wire 1 R/ S [4] $end
$var wire 1 S/ S [3] $end
$var wire 1 T/ S [2] $end
$var wire 1 U/ S [1] $end
$var wire 1 V/ S [0] $end
$var wire 1 :0 Cout $end
$var wire 1 90 Ovfl $end
$var wire 1 41 C0 $end
$var wire 1 51 C1 $end
$var wire 1 61 C2 $end
$var wire 1 71 overflow_pos $end
$var wire 1 81 overflow_neg $end
$var wire 1 91 new_B [15] $end
$var wire 1 :1 new_B [14] $end
$var wire 1 ;1 new_B [13] $end
$var wire 1 <1 new_B [12] $end
$var wire 1 =1 new_B [11] $end
$var wire 1 >1 new_B [10] $end
$var wire 1 ?1 new_B [9] $end
$var wire 1 @1 new_B [8] $end
$var wire 1 A1 new_B [7] $end
$var wire 1 B1 new_B [6] $end
$var wire 1 C1 new_B [5] $end
$var wire 1 D1 new_B [4] $end
$var wire 1 E1 new_B [3] $end
$var wire 1 F1 new_B [2] $end
$var wire 1 G1 new_B [1] $end
$var wire 1 H1 new_B [0] $end
$var wire 1 I1 Sum [15] $end
$var wire 1 J1 Sum [14] $end
$var wire 1 K1 Sum [13] $end
$var wire 1 L1 Sum [12] $end
$var wire 1 M1 Sum [11] $end
$var wire 1 N1 Sum [10] $end
$var wire 1 O1 Sum [9] $end
$var wire 1 P1 Sum [8] $end
$var wire 1 Q1 Sum [7] $end
$var wire 1 R1 Sum [6] $end
$var wire 1 S1 Sum [5] $end
$var wire 1 T1 Sum [4] $end
$var wire 1 U1 Sum [3] $end
$var wire 1 V1 Sum [2] $end
$var wire 1 W1 Sum [1] $end
$var wire 1 X1 Sum [0] $end

$scope module add3_0 $end
$var wire 1 1! A [3] $end
$var wire 1 2! A [2] $end
$var wire 1 3! A [1] $end
$var wire 1 4! A [0] $end
$var wire 1 E1 B [3] $end
$var wire 1 F1 B [2] $end
$var wire 1 G1 B [1] $end
$var wire 1 H1 B [0] $end
$var wire 1 H! Cin $end
$var wire 1 U1 S [3] $end
$var wire 1 V1 S [2] $end
$var wire 1 W1 S [1] $end
$var wire 1 X1 S [0] $end
$var wire 1 41 Cout $end
$var wire 1 Y1 P [3] $end
$var wire 1 Z1 P [2] $end
$var wire 1 [1 P [1] $end
$var wire 1 \1 P [0] $end
$var wire 1 ]1 G [3] $end
$var wire 1 ^1 G [2] $end
$var wire 1 _1 G [1] $end
$var wire 1 `1 G [0] $end
$var wire 1 a1 C [4] $end
$var wire 1 b1 C [3] $end
$var wire 1 c1 C [2] $end
$var wire 1 d1 C [1] $end
$var wire 1 e1 C [0] $end
$upscope $end

$scope module add7_4 $end
$var wire 1 -! A [3] $end
$var wire 1 .! A [2] $end
$var wire 1 /! A [1] $end
$var wire 1 0! A [0] $end
$var wire 1 A1 B [3] $end
$var wire 1 B1 B [2] $end
$var wire 1 C1 B [1] $end
$var wire 1 D1 B [0] $end
$var wire 1 41 Cin $end
$var wire 1 Q1 S [3] $end
$var wire 1 R1 S [2] $end
$var wire 1 S1 S [1] $end
$var wire 1 T1 S [0] $end
$var wire 1 51 Cout $end
$var wire 1 f1 P [3] $end
$var wire 1 g1 P [2] $end
$var wire 1 h1 P [1] $end
$var wire 1 i1 P [0] $end
$var wire 1 j1 G [3] $end
$var wire 1 k1 G [2] $end
$var wire 1 l1 G [1] $end
$var wire 1 m1 G [0] $end
$var wire 1 n1 C [4] $end
$var wire 1 o1 C [3] $end
$var wire 1 p1 C [2] $end
$var wire 1 q1 C [1] $end
$var wire 1 r1 C [0] $end
$upscope $end

$scope module add11_8 $end
$var wire 1 )! A [3] $end
$var wire 1 *! A [2] $end
$var wire 1 +! A [1] $end
$var wire 1 ,! A [0] $end
$var wire 1 =1 B [3] $end
$var wire 1 >1 B [2] $end
$var wire 1 ?1 B [1] $end
$var wire 1 @1 B [0] $end
$var wire 1 51 Cin $end
$var wire 1 M1 S [3] $end
$var wire 1 N1 S [2] $end
$var wire 1 O1 S [1] $end
$var wire 1 P1 S [0] $end
$var wire 1 61 Cout $end
$var wire 1 s1 P [3] $end
$var wire 1 t1 P [2] $end
$var wire 1 u1 P [1] $end
$var wire 1 v1 P [0] $end
$var wire 1 w1 G [3] $end
$var wire 1 x1 G [2] $end
$var wire 1 y1 G [1] $end
$var wire 1 z1 G [0] $end
$var wire 1 {1 C [4] $end
$var wire 1 |1 C [3] $end
$var wire 1 }1 C [2] $end
$var wire 1 ~1 C [1] $end
$var wire 1 !2 C [0] $end
$upscope $end

$scope module add15_12 $end
$var wire 1 %! A [3] $end
$var wire 1 &! A [2] $end
$var wire 1 '! A [1] $end
$var wire 1 (! A [0] $end
$var wire 1 91 B [3] $end
$var wire 1 :1 B [2] $end
$var wire 1 ;1 B [1] $end
$var wire 1 <1 B [0] $end
$var wire 1 61 Cin $end
$var wire 1 I1 S [3] $end
$var wire 1 J1 S [2] $end
$var wire 1 K1 S [1] $end
$var wire 1 L1 S [0] $end
$var wire 1 :0 Cout $end
$var wire 1 "2 P [3] $end
$var wire 1 #2 P [2] $end
$var wire 1 $2 P [1] $end
$var wire 1 %2 P [0] $end
$var wire 1 &2 G [3] $end
$var wire 1 '2 G [2] $end
$var wire 1 (2 G [1] $end
$var wire 1 )2 G [0] $end
$var wire 1 *2 C [4] $end
$var wire 1 +2 C [3] $end
$var wire 1 ,2 C [2] $end
$var wire 1 -2 C [1] $end
$var wire 1 .2 C [0] $end
$upscope $end
$upscope $end

$scope module cla_memaddr $end
$var wire 1 /2 A [15] $end
$var wire 1 02 A [14] $end
$var wire 1 12 A [13] $end
$var wire 1 22 A [12] $end
$var wire 1 32 A [11] $end
$var wire 1 42 A [10] $end
$var wire 1 52 A [9] $end
$var wire 1 62 A [8] $end
$var wire 1 72 A [7] $end
$var wire 1 82 A [6] $end
$var wire 1 92 A [5] $end
$var wire 1 :2 A [4] $end
$var wire 1 ;2 A [3] $end
$var wire 1 <2 A [2] $end
$var wire 1 =2 A [1] $end
$var wire 1 >2 A [0] $end
$var wire 1 5! B [15] $end
$var wire 1 6! B [14] $end
$var wire 1 7! B [13] $end
$var wire 1 8! B [12] $end
$var wire 1 9! B [11] $end
$var wire 1 :! B [10] $end
$var wire 1 ;! B [9] $end
$var wire 1 <! B [8] $end
$var wire 1 =! B [7] $end
$var wire 1 >! B [6] $end
$var wire 1 ?! B [5] $end
$var wire 1 @! B [4] $end
$var wire 1 A! B [3] $end
$var wire 1 B! B [2] $end
$var wire 1 C! B [1] $end
$var wire 1 D! B [0] $end
$var wire 1 ?2 Sub $end
$var wire 1 )0 S [15] $end
$var wire 1 *0 S [14] $end
$var wire 1 +0 S [13] $end
$var wire 1 ,0 S [12] $end
$var wire 1 -0 S [11] $end
$var wire 1 .0 S [10] $end
$var wire 1 /0 S [9] $end
$var wire 1 00 S [8] $end
$var wire 1 10 S [7] $end
$var wire 1 20 S [6] $end
$var wire 1 30 S [5] $end
$var wire 1 40 S [4] $end
$var wire 1 50 S [3] $end
$var wire 1 60 S [2] $end
$var wire 1 70 S [1] $end
$var wire 1 80 S [0] $end
$var wire 1 :0 Cout $end
$var wire 1 90 Ovfl $end
$var wire 1 @2 C0 $end
$var wire 1 A2 C1 $end
$var wire 1 B2 C2 $end
$var wire 1 C2 overflow_pos $end
$var wire 1 D2 overflow_neg $end
$var wire 1 E2 new_B [15] $end
$var wire 1 F2 new_B [14] $end
$var wire 1 G2 new_B [13] $end
$var wire 1 H2 new_B [12] $end
$var wire 1 I2 new_B [11] $end
$var wire 1 J2 new_B [10] $end
$var wire 1 K2 new_B [9] $end
$var wire 1 L2 new_B [8] $end
$var wire 1 M2 new_B [7] $end
$var wire 1 N2 new_B [6] $end
$var wire 1 O2 new_B [5] $end
$var wire 1 P2 new_B [4] $end
$var wire 1 Q2 new_B [3] $end
$var wire 1 R2 new_B [2] $end
$var wire 1 S2 new_B [1] $end
$var wire 1 T2 new_B [0] $end
$var wire 1 U2 Sum [15] $end
$var wire 1 V2 Sum [14] $end
$var wire 1 W2 Sum [13] $end
$var wire 1 X2 Sum [12] $end
$var wire 1 Y2 Sum [11] $end
$var wire 1 Z2 Sum [10] $end
$var wire 1 [2 Sum [9] $end
$var wire 1 \2 Sum [8] $end
$var wire 1 ]2 Sum [7] $end
$var wire 1 ^2 Sum [6] $end
$var wire 1 _2 Sum [5] $end
$var wire 1 `2 Sum [4] $end
$var wire 1 a2 Sum [3] $end
$var wire 1 b2 Sum [2] $end
$var wire 1 c2 Sum [1] $end
$var wire 1 d2 Sum [0] $end

$scope module add3_0 $end
$var wire 1 ;2 A [3] $end
$var wire 1 <2 A [2] $end
$var wire 1 =2 A [1] $end
$var wire 1 >2 A [0] $end
$var wire 1 Q2 B [3] $end
$var wire 1 R2 B [2] $end
$var wire 1 S2 B [1] $end
$var wire 1 T2 B [0] $end
$var wire 1 ?2 Cin $end
$var wire 1 a2 S [3] $end
$var wire 1 b2 S [2] $end
$var wire 1 c2 S [1] $end
$var wire 1 d2 S [0] $end
$var wire 1 @2 Cout $end
$var wire 1 e2 P [3] $end
$var wire 1 f2 P [2] $end
$var wire 1 g2 P [1] $end
$var wire 1 h2 P [0] $end
$var wire 1 i2 G [3] $end
$var wire 1 j2 G [2] $end
$var wire 1 k2 G [1] $end
$var wire 1 l2 G [0] $end
$var wire 1 m2 C [4] $end
$var wire 1 n2 C [3] $end
$var wire 1 o2 C [2] $end
$var wire 1 p2 C [1] $end
$var wire 1 q2 C [0] $end
$upscope $end

$scope module add7_4 $end
$var wire 1 72 A [3] $end
$var wire 1 82 A [2] $end
$var wire 1 92 A [1] $end
$var wire 1 :2 A [0] $end
$var wire 1 M2 B [3] $end
$var wire 1 N2 B [2] $end
$var wire 1 O2 B [1] $end
$var wire 1 P2 B [0] $end
$var wire 1 @2 Cin $end
$var wire 1 ]2 S [3] $end
$var wire 1 ^2 S [2] $end
$var wire 1 _2 S [1] $end
$var wire 1 `2 S [0] $end
$var wire 1 A2 Cout $end
$var wire 1 r2 P [3] $end
$var wire 1 s2 P [2] $end
$var wire 1 t2 P [1] $end
$var wire 1 u2 P [0] $end
$var wire 1 v2 G [3] $end
$var wire 1 w2 G [2] $end
$var wire 1 x2 G [1] $end
$var wire 1 y2 G [0] $end
$var wire 1 z2 C [4] $end
$var wire 1 {2 C [3] $end
$var wire 1 |2 C [2] $end
$var wire 1 }2 C [1] $end
$var wire 1 ~2 C [0] $end
$upscope $end

$scope module add11_8 $end
$var wire 1 32 A [3] $end
$var wire 1 42 A [2] $end
$var wire 1 52 A [1] $end
$var wire 1 62 A [0] $end
$var wire 1 I2 B [3] $end
$var wire 1 J2 B [2] $end
$var wire 1 K2 B [1] $end
$var wire 1 L2 B [0] $end
$var wire 1 A2 Cin $end
$var wire 1 Y2 S [3] $end
$var wire 1 Z2 S [2] $end
$var wire 1 [2 S [1] $end
$var wire 1 \2 S [0] $end
$var wire 1 B2 Cout $end
$var wire 1 !3 P [3] $end
$var wire 1 "3 P [2] $end
$var wire 1 #3 P [1] $end
$var wire 1 $3 P [0] $end
$var wire 1 %3 G [3] $end
$var wire 1 &3 G [2] $end
$var wire 1 '3 G [1] $end
$var wire 1 (3 G [0] $end
$var wire 1 )3 C [4] $end
$var wire 1 *3 C [3] $end
$var wire 1 +3 C [2] $end
$var wire 1 ,3 C [1] $end
$var wire 1 -3 C [0] $end
$upscope $end

$scope module add15_12 $end
$var wire 1 /2 A [3] $end
$var wire 1 02 A [2] $end
$var wire 1 12 A [1] $end
$var wire 1 22 A [0] $end
$var wire 1 E2 B [3] $end
$var wire 1 F2 B [2] $end
$var wire 1 G2 B [1] $end
$var wire 1 H2 B [0] $end
$var wire 1 B2 Cin $end
$var wire 1 U2 S [3] $end
$var wire 1 V2 S [2] $end
$var wire 1 W2 S [1] $end
$var wire 1 X2 S [0] $end
$var wire 1 :0 Cout $end
$var wire 1 .3 P [3] $end
$var wire 1 /3 P [2] $end
$var wire 1 03 P [1] $end
$var wire 1 13 P [0] $end
$var wire 1 23 G [3] $end
$var wire 1 33 G [2] $end
$var wire 1 43 G [1] $end
$var wire 1 53 G [0] $end
$var wire 1 63 C [4] $end
$var wire 1 73 C [3] $end
$var wire 1 83 C [2] $end
$var wire 1 93 C [1] $end
$var wire 1 :3 C [0] $end
$upscope $end
$upscope $end

$scope module red $end
$var wire 1 %! rs [15] $end
$var wire 1 &! rs [14] $end
$var wire 1 '! rs [13] $end
$var wire 1 (! rs [12] $end
$var wire 1 )! rs [11] $end
$var wire 1 *! rs [10] $end
$var wire 1 +! rs [9] $end
$var wire 1 ,! rs [8] $end
$var wire 1 -! rs [7] $end
$var wire 1 .! rs [6] $end
$var wire 1 /! rs [5] $end
$var wire 1 0! rs [4] $end
$var wire 1 1! rs [3] $end
$var wire 1 2! rs [2] $end
$var wire 1 3! rs [1] $end
$var wire 1 4! rs [0] $end
$var wire 1 5! rt [15] $end
$var wire 1 6! rt [14] $end
$var wire 1 7! rt [13] $end
$var wire 1 8! rt [12] $end
$var wire 1 9! rt [11] $end
$var wire 1 :! rt [10] $end
$var wire 1 ;! rt [9] $end
$var wire 1 <! rt [8] $end
$var wire 1 =! rt [7] $end
$var wire 1 >! rt [6] $end
$var wire 1 ?! rt [5] $end
$var wire 1 @! rt [4] $end
$var wire 1 A! rt [3] $end
$var wire 1 B! rt [2] $end
$var wire 1 C! rt [1] $end
$var wire 1 D! rt [0] $end
$var wire 1 W/ rd [15] $end
$var wire 1 X/ rd [14] $end
$var wire 1 Y/ rd [13] $end
$var wire 1 Z/ rd [12] $end
$var wire 1 [/ rd [11] $end
$var wire 1 \/ rd [10] $end
$var wire 1 ]/ rd [9] $end
$var wire 1 ^/ rd [8] $end
$var wire 1 _/ rd [7] $end
$var wire 1 `/ rd [6] $end
$var wire 1 a/ rd [5] $end
$var wire 1 b/ rd [4] $end
$var wire 1 c/ rd [3] $end
$var wire 1 d/ rd [2] $end
$var wire 1 e/ rd [1] $end
$var wire 1 f/ rd [0] $end
$var wire 1 ;3 rs_lower [7] $end
$var wire 1 <3 rs_lower [6] $end
$var wire 1 =3 rs_lower [5] $end
$var wire 1 >3 rs_lower [4] $end
$var wire 1 ?3 rs_lower [3] $end
$var wire 1 @3 rs_lower [2] $end
$var wire 1 A3 rs_lower [1] $end
$var wire 1 B3 rs_lower [0] $end
$var wire 1 C3 rs_upper [7] $end
$var wire 1 D3 rs_upper [6] $end
$var wire 1 E3 rs_upper [5] $end
$var wire 1 F3 rs_upper [4] $end
$var wire 1 G3 rs_upper [3] $end
$var wire 1 H3 rs_upper [2] $end
$var wire 1 I3 rs_upper [1] $end
$var wire 1 J3 rs_upper [0] $end
$var wire 1 K3 rt_lower [7] $end
$var wire 1 L3 rt_lower [6] $end
$var wire 1 M3 rt_lower [5] $end
$var wire 1 N3 rt_lower [4] $end
$var wire 1 O3 rt_lower [3] $end
$var wire 1 P3 rt_lower [2] $end
$var wire 1 Q3 rt_lower [1] $end
$var wire 1 R3 rt_lower [0] $end
$var wire 1 S3 rt_upper [7] $end
$var wire 1 T3 rt_upper [6] $end
$var wire 1 U3 rt_upper [5] $end
$var wire 1 V3 rt_upper [4] $end
$var wire 1 W3 rt_upper [3] $end
$var wire 1 X3 rt_upper [2] $end
$var wire 1 Y3 rt_upper [1] $end
$var wire 1 Z3 rt_upper [0] $end
$var wire 1 [3 SumAB [8] $end
$var wire 1 \3 SumAB [7] $end
$var wire 1 ]3 SumAB [6] $end
$var wire 1 ^3 SumAB [5] $end
$var wire 1 _3 SumAB [4] $end
$var wire 1 `3 SumAB [3] $end
$var wire 1 a3 SumAB [2] $end
$var wire 1 b3 SumAB [1] $end
$var wire 1 c3 SumAB [0] $end
$var wire 1 d3 SumCD [8] $end
$var wire 1 e3 SumCD [7] $end
$var wire 1 f3 SumCD [6] $end
$var wire 1 g3 SumCD [5] $end
$var wire 1 h3 SumCD [4] $end
$var wire 1 i3 SumCD [3] $end
$var wire 1 j3 SumCD [2] $end
$var wire 1 k3 SumCD [1] $end
$var wire 1 l3 SumCD [0] $end
$var wire 1 m3 cout1 $end
$var wire 1 n3 cout2 $end
$var wire 1 o3 cout3 $end
$var wire 1 p3 cout4 $end
$var wire 1 q3 cout5 $end
$var wire 1 r3 bit8_4bit_AB [3] $end
$var wire 1 s3 bit8_4bit_AB [2] $end
$var wire 1 t3 bit8_4bit_AB [1] $end
$var wire 1 u3 bit8_4bit_AB [0] $end
$var wire 1 v3 bit8_4bit_CD [3] $end
$var wire 1 w3 bit8_4bit_CD [2] $end
$var wire 1 x3 bit8_4bit_CD [1] $end
$var wire 1 y3 bit8_4bit_CD [0] $end
$var wire 1 z3 rd_temp [15] $end
$var wire 1 {3 rd_temp [14] $end
$var wire 1 |3 rd_temp [13] $end
$var wire 1 }3 rd_temp [12] $end
$var wire 1 ~3 rd_temp [11] $end
$var wire 1 !4 rd_temp [10] $end
$var wire 1 "4 rd_temp [9] $end
$var wire 1 #4 rd_temp [8] $end
$var wire 1 $4 rd_temp [7] $end
$var wire 1 %4 rd_temp [6] $end
$var wire 1 &4 rd_temp [5] $end
$var wire 1 '4 rd_temp [4] $end
$var wire 1 (4 rd_temp [3] $end
$var wire 1 )4 rd_temp [2] $end
$var wire 1 *4 rd_temp [1] $end
$var wire 1 +4 rd_temp [0] $end

$scope module cla_ab1 $end
$var wire 1 ?3 A [3] $end
$var wire 1 @3 A [2] $end
$var wire 1 A3 A [1] $end
$var wire 1 B3 A [0] $end
$var wire 1 G3 B [3] $end
$var wire 1 H3 B [2] $end
$var wire 1 I3 B [1] $end
$var wire 1 J3 B [0] $end
$var wire 1 ,4 Cin $end
$var wire 1 `3 S [3] $end
$var wire 1 a3 S [2] $end
$var wire 1 b3 S [1] $end
$var wire 1 c3 S [0] $end
$var wire 1 m3 Cout $end
$var wire 1 -4 P [3] $end
$var wire 1 .4 P [2] $end
$var wire 1 /4 P [1] $end
$var wire 1 04 P [0] $end
$var wire 1 14 G [3] $end
$var wire 1 24 G [2] $end
$var wire 1 34 G [1] $end
$var wire 1 44 G [0] $end
$var wire 1 54 C [4] $end
$var wire 1 64 C [3] $end
$var wire 1 74 C [2] $end
$var wire 1 84 C [1] $end
$var wire 1 94 C [0] $end
$upscope $end

$scope module cla_ab2 $end
$var wire 1 ;3 A [3] $end
$var wire 1 <3 A [2] $end
$var wire 1 =3 A [1] $end
$var wire 1 >3 A [0] $end
$var wire 1 C3 B [3] $end
$var wire 1 D3 B [2] $end
$var wire 1 E3 B [1] $end
$var wire 1 F3 B [0] $end
$var wire 1 m3 Cin $end
$var wire 1 \3 S [3] $end
$var wire 1 ]3 S [2] $end
$var wire 1 ^3 S [1] $end
$var wire 1 _3 S [0] $end
$var wire 1 [3 Cout $end
$var wire 1 :4 P [3] $end
$var wire 1 ;4 P [2] $end
$var wire 1 <4 P [1] $end
$var wire 1 =4 P [0] $end
$var wire 1 >4 G [3] $end
$var wire 1 ?4 G [2] $end
$var wire 1 @4 G [1] $end
$var wire 1 A4 G [0] $end
$var wire 1 B4 C [4] $end
$var wire 1 C4 C [3] $end
$var wire 1 D4 C [2] $end
$var wire 1 E4 C [1] $end
$var wire 1 F4 C [0] $end
$upscope $end

$scope module cla_cd1 $end
$var wire 1 O3 A [3] $end
$var wire 1 P3 A [2] $end
$var wire 1 Q3 A [1] $end
$var wire 1 R3 A [0] $end
$var wire 1 W3 B [3] $end
$var wire 1 X3 B [2] $end
$var wire 1 Y3 B [1] $end
$var wire 1 Z3 B [0] $end
$var wire 1 G4 Cin $end
$var wire 1 i3 S [3] $end
$var wire 1 j3 S [2] $end
$var wire 1 k3 S [1] $end
$var wire 1 l3 S [0] $end
$var wire 1 n3 Cout $end
$var wire 1 H4 P [3] $end
$var wire 1 I4 P [2] $end
$var wire 1 J4 P [1] $end
$var wire 1 K4 P [0] $end
$var wire 1 L4 G [3] $end
$var wire 1 M4 G [2] $end
$var wire 1 N4 G [1] $end
$var wire 1 O4 G [0] $end
$var wire 1 P4 C [4] $end
$var wire 1 Q4 C [3] $end
$var wire 1 R4 C [2] $end
$var wire 1 S4 C [1] $end
$var wire 1 T4 C [0] $end
$upscope $end

$scope module cla_cd2 $end
$var wire 1 K3 A [3] $end
$var wire 1 L3 A [2] $end
$var wire 1 M3 A [1] $end
$var wire 1 N3 A [0] $end
$var wire 1 S3 B [3] $end
$var wire 1 T3 B [2] $end
$var wire 1 U3 B [1] $end
$var wire 1 V3 B [0] $end
$var wire 1 n3 Cin $end
$var wire 1 e3 S [3] $end
$var wire 1 f3 S [2] $end
$var wire 1 g3 S [1] $end
$var wire 1 h3 S [0] $end
$var wire 1 d3 Cout $end
$var wire 1 U4 P [3] $end
$var wire 1 V4 P [2] $end
$var wire 1 W4 P [1] $end
$var wire 1 X4 P [0] $end
$var wire 1 Y4 G [3] $end
$var wire 1 Z4 G [2] $end
$var wire 1 [4 G [1] $end
$var wire 1 \4 G [0] $end
$var wire 1 ]4 C [4] $end
$var wire 1 ^4 C [3] $end
$var wire 1 _4 C [2] $end
$var wire 1 `4 C [1] $end
$var wire 1 a4 C [0] $end
$upscope $end

$scope module cla_sum1 $end
$var wire 1 `3 A [3] $end
$var wire 1 a3 A [2] $end
$var wire 1 b3 A [1] $end
$var wire 1 c3 A [0] $end
$var wire 1 i3 B [3] $end
$var wire 1 j3 B [2] $end
$var wire 1 k3 B [1] $end
$var wire 1 l3 B [0] $end
$var wire 1 b4 Cin $end
$var wire 1 (4 S [3] $end
$var wire 1 )4 S [2] $end
$var wire 1 *4 S [1] $end
$var wire 1 +4 S [0] $end
$var wire 1 o3 Cout $end
$var wire 1 c4 P [3] $end
$var wire 1 d4 P [2] $end
$var wire 1 e4 P [1] $end
$var wire 1 f4 P [0] $end
$var wire 1 g4 G [3] $end
$var wire 1 h4 G [2] $end
$var wire 1 i4 G [1] $end
$var wire 1 j4 G [0] $end
$var wire 1 k4 C [4] $end
$var wire 1 l4 C [3] $end
$var wire 1 m4 C [2] $end
$var wire 1 n4 C [1] $end
$var wire 1 o4 C [0] $end
$upscope $end

$scope module cla_sum2 $end
$var wire 1 \3 A [3] $end
$var wire 1 ]3 A [2] $end
$var wire 1 ^3 A [1] $end
$var wire 1 _3 A [0] $end
$var wire 1 e3 B [3] $end
$var wire 1 f3 B [2] $end
$var wire 1 g3 B [1] $end
$var wire 1 h3 B [0] $end
$var wire 1 o3 Cin $end
$var wire 1 $4 S [3] $end
$var wire 1 %4 S [2] $end
$var wire 1 &4 S [1] $end
$var wire 1 '4 S [0] $end
$var wire 1 p3 Cout $end
$var wire 1 p4 P [3] $end
$var wire 1 q4 P [2] $end
$var wire 1 r4 P [1] $end
$var wire 1 s4 P [0] $end
$var wire 1 t4 G [3] $end
$var wire 1 u4 G [2] $end
$var wire 1 v4 G [1] $end
$var wire 1 w4 G [0] $end
$var wire 1 x4 C [4] $end
$var wire 1 y4 C [3] $end
$var wire 1 z4 C [2] $end
$var wire 1 {4 C [1] $end
$var wire 1 |4 C [0] $end
$upscope $end

$scope module cla_sum3 $end
$var wire 1 r3 A [3] $end
$var wire 1 s3 A [2] $end
$var wire 1 t3 A [1] $end
$var wire 1 u3 A [0] $end
$var wire 1 v3 B [3] $end
$var wire 1 w3 B [2] $end
$var wire 1 x3 B [1] $end
$var wire 1 y3 B [0] $end
$var wire 1 p3 Cin $end
$var wire 1 ~3 S [3] $end
$var wire 1 !4 S [2] $end
$var wire 1 "4 S [1] $end
$var wire 1 #4 S [0] $end
$var wire 1 q3 Cout $end
$var wire 1 }4 P [3] $end
$var wire 1 ~4 P [2] $end
$var wire 1 !5 P [1] $end
$var wire 1 "5 P [0] $end
$var wire 1 #5 G [3] $end
$var wire 1 $5 G [2] $end
$var wire 1 %5 G [1] $end
$var wire 1 &5 G [0] $end
$var wire 1 '5 C [4] $end
$var wire 1 (5 C [3] $end
$var wire 1 )5 C [2] $end
$var wire 1 *5 C [1] $end
$var wire 1 +5 C [0] $end
$upscope $end
$upscope $end

$scope module shift $end
$var wire 1 G! Mode [1] $end
$var wire 1 H! Mode [0] $end
$var wire 1 %! Shift_in [15] $end
$var wire 1 &! Shift_in [14] $end
$var wire 1 '! Shift_in [13] $end
$var wire 1 (! Shift_in [12] $end
$var wire 1 )! Shift_in [11] $end
$var wire 1 *! Shift_in [10] $end
$var wire 1 +! Shift_in [9] $end
$var wire 1 ,! Shift_in [8] $end
$var wire 1 -! Shift_in [7] $end
$var wire 1 .! Shift_in [6] $end
$var wire 1 /! Shift_in [5] $end
$var wire 1 0! Shift_in [4] $end
$var wire 1 1! Shift_in [3] $end
$var wire 1 2! Shift_in [2] $end
$var wire 1 3! Shift_in [1] $end
$var wire 1 4! Shift_in [0] $end
$var wire 1 B/ Shift_val [3] $end
$var wire 1 C/ Shift_val [2] $end
$var wire 1 D/ Shift_val [1] $end
$var wire 1 E/ Shift_val [0] $end
$var wire 1 g/ Shift_out [15] $end
$var wire 1 h/ Shift_out [14] $end
$var wire 1 i/ Shift_out [13] $end
$var wire 1 j/ Shift_out [12] $end
$var wire 1 k/ Shift_out [11] $end
$var wire 1 l/ Shift_out [10] $end
$var wire 1 m/ Shift_out [9] $end
$var wire 1 n/ Shift_out [8] $end
$var wire 1 o/ Shift_out [7] $end
$var wire 1 p/ Shift_out [6] $end
$var wire 1 q/ Shift_out [5] $end
$var wire 1 r/ Shift_out [4] $end
$var wire 1 s/ Shift_out [3] $end
$var wire 1 t/ Shift_out [2] $end
$var wire 1 u/ Shift_out [1] $end
$var wire 1 v/ Shift_out [0] $end
$var reg 16 ,5 shft_stg1_right [15:0] $end
$var reg 16 -5 shft_stg1_left [15:0] $end
$var reg 16 .5 ror_stg1 [15:0] $end
$var wire 1 /5 msb_sra $end
$var reg 16 05 sra_out [15:0] $end
$var reg 16 15 sll_out [15:0] $end
$var reg 16 25 ror_out [15:0] $end
$upscope $end
$upscope $end

$scope module data_mem $end
$var parameter 32 35 ADDR_WIDTH $end
$var wire 1 n" data_out [15] $end
$var wire 1 o" data_out [14] $end
$var wire 1 p" data_out [13] $end
$var wire 1 q" data_out [12] $end
$var wire 1 r" data_out [11] $end
$var wire 1 s" data_out [10] $end
$var wire 1 t" data_out [9] $end
$var wire 1 u" data_out [8] $end
$var wire 1 v" data_out [7] $end
$var wire 1 w" data_out [6] $end
$var wire 1 x" data_out [5] $end
$var wire 1 y" data_out [4] $end
$var wire 1 z" data_out [3] $end
$var wire 1 {" data_out [2] $end
$var wire 1 |" data_out [1] $end
$var wire 1 }" data_out [0] $end
$var wire 1 '" data_in [15] $end
$var wire 1 (" data_in [14] $end
$var wire 1 )" data_in [13] $end
$var wire 1 *" data_in [12] $end
$var wire 1 +" data_in [11] $end
$var wire 1 ," data_in [10] $end
$var wire 1 -" data_in [9] $end
$var wire 1 ." data_in [8] $end
$var wire 1 /" data_in [7] $end
$var wire 1 0" data_in [6] $end
$var wire 1 1" data_in [5] $end
$var wire 1 2" data_in [4] $end
$var wire 1 3" data_in [3] $end
$var wire 1 4" data_in [2] $end
$var wire 1 5" data_in [1] $end
$var wire 1 6" data_in [0] $end
$var wire 1 Y! addr [15] $end
$var wire 1 Z! addr [14] $end
$var wire 1 [! addr [13] $end
$var wire 1 \! addr [12] $end
$var wire 1 ]! addr [11] $end
$var wire 1 ^! addr [10] $end
$var wire 1 _! addr [9] $end
$var wire 1 `! addr [8] $end
$var wire 1 a! addr [7] $end
$var wire 1 b! addr [6] $end
$var wire 1 c! addr [5] $end
$var wire 1 d! addr [4] $end
$var wire 1 e! addr [3] $end
$var wire 1 f! addr [2] $end
$var wire 1 g! addr [1] $end
$var wire 1 h! addr [0] $end
$var wire 1 X# enable $end
$var wire 1 V# wr $end
$var wire 1 !! clk $end
$var wire 1 45 rst $end
$var reg 1 55 loaded $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1}
0~
x#!
b0 $!
b1 7"
bx 8"
bx 9"
bx :"
b10 ["
bx \"
bx ]"
1~#
b0 &%
b10 '%
b1000000000000000 (%
b0 *%
b10 +%
b1000000000000000 ,%
bx ?%
bx @%
bx A%
bx C%
bx D%
bx E%
b0 W%
b10 X%
b1000000000000000 Y%
b0 [%
b10 \%
b1000000000000000 ]%
0_%
0a%
0c%
0e%
0g%
0i%
0k%
0m%
0o%
0q%
0s%
0u%
0w%
0y%
0{%
0}%
0!&
0#&
0%&
0'&
0)&
0#+
0%+
0'+
0)+
x;,
bx F/
x;0
x<0
x=0
bx ,5
bx -5
bx .5
bx 05
bx 15
bx 25
155
0+&
0-&
0/&
01&
03&
05&
07&
09&
0;&
0=&
0?&
0A&
0C&
0E&
0G&
0I&
0K&
0M&
0O&
0Q&
0S&
0U&
0W&
0Y&
0[&
0]&
0_&
0a&
0c&
0e&
0g&
0i&
0k&
0m&
0o&
0q&
0s&
0u&
0w&
0y&
0{&
0}&
0!'
0#'
0%'
0''
0)'
0+'
0-'
0/'
01'
03'
05'
07'
09'
0;'
0='
0?'
0A'
0C'
0E'
0G'
0I'
0K'
0M'
0O'
0Q'
0S'
0U'
0W'
0Y'
0['
0]'
0_'
0a'
0c'
0e'
0g'
0i'
0k'
0m'
0o'
0q'
0s'
0u'
0w'
0y'
0{'
0}'
0!(
0#(
0%(
0'(
0)(
0+(
0-(
0/(
01(
03(
05(
07(
09(
0;(
0=(
0?(
0A(
0C(
0E(
0G(
0I(
0K(
0M(
0O(
0Q(
0S(
0U(
0W(
0Y(
0[(
0](
0_(
0a(
0c(
0e(
0g(
0i(
0k(
0m(
0o(
0q(
0s(
0u(
0w(
0y(
0{(
0}(
0!)
0#)
0%)
0')
0))
0+)
0-)
0/)
01)
03)
05)
07)
09)
0;)
0=)
0?)
0A)
0C)
0E)
0G)
0I)
0K)
0M)
0O)
0Q)
0S)
0U)
0W)
0Y)
0[)
0])
0_)
0a)
0c)
0e)
0g)
0i)
0k)
0m)
0o)
0q)
0s)
0u)
0w)
0y)
0{)
0})
0!*
0#*
0%*
0'*
0)*
0+*
0-*
0/*
01*
03*
05*
07*
09*
0;*
0=*
0?*
0A*
0C*
0E*
0G*
0I*
0K*
0M*
0O*
0Q*
0S*
0U*
0W*
0Y*
0[*
0]*
0_*
0a*
0c*
0e*
0g*
0i*
0k*
0m*
0o*
0q*
0s*
0u*
0w*
0y*
0{*
0}*
0!+
b10000 Z#
b10000 35
b0 y
b1 z
b10 {
b100 |
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
0@
1?
0>
0=
0<
0;
0:
09
18
07
06
05
04
13
02
11
1A
1E
0D
0C
0B
0U
1T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0V
0W
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xx
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0'!
0&!
0%!
0D!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
0H!
1G!
0F!
1E!
0X!
1W!
0V!
0U!
0T!
0S!
0R!
0Q!
1P!
0O!
0N!
0M!
0L!
1K!
0J!
1I!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
1l!
0k!
0j!
0i!
xp!
xo!
xn!
xm!
1t!
0s!
0r!
0q!
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
0Z"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
0m"
1l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0/#
1.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0?#
1>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
1F#
0E#
0D#
0C#
0B#
0A#
0@#
xR#
xQ#
xP#
1S#
1T#
1U#
0V#
0W#
0X#
0Y#
01$
10$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
0Q$
1P$
0O$
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
0)%
0B%
0Z%
0^%
0`%
0b%
0d%
0f%
0h%
0j%
0l%
0n%
0p%
0r%
0t%
0v%
0x%
0z%
0|%
0~%
0"&
0$&
0&&
0(&
0*&
0,&
0.&
00&
02&
04&
06&
08&
0:&
0<&
0>&
0@&
0B&
0D&
0F&
0H&
0J&
0L&
0N&
0P&
0R&
0T&
0V&
0X&
0Z&
0\&
0^&
0`&
0b&
0d&
0f&
0h&
0j&
0l&
0n&
0p&
0r&
0t&
0v&
0x&
0z&
0|&
0~&
0"'
0$'
0&'
0('
0*'
0,'
0.'
00'
02'
04'
06'
08'
0:'
0<'
0>'
0@'
0B'
0D'
0F'
0H'
0J'
0L'
0N'
0P'
0R'
0T'
0V'
0X'
0Z'
0\'
0^'
0`'
0b'
0d'
0f'
0h'
0j'
0l'
0n'
0p'
0r'
0t'
0v'
0x'
0z'
0|'
0~'
0"(
0$(
0&(
0((
0*(
0,(
0.(
00(
02(
04(
06(
08(
0:(
0<(
0>(
0@(
0B(
0D(
0F(
0H(
0J(
0L(
0N(
0P(
0R(
0T(
0V(
0X(
0Z(
0\(
0^(
0`(
0b(
0d(
0f(
0h(
0j(
0l(
0n(
0p(
0r(
0t(
0v(
0x(
0z(
0|(
0~(
0")
0$)
0&)
0()
0*)
0,)
0.)
00)
02)
04)
06)
08)
0:)
0<)
0>)
0@)
0B)
0D)
0F)
0H)
0J)
0L)
0N)
0P)
0R)
0T)
0V)
0X)
0Z)
0\)
0^)
0`)
0b)
0d)
0f)
0h)
0j)
0l)
0n)
0p)
0r)
0t)
0v)
0x)
0z)
0|)
0~)
0"*
0$*
0&*
0(*
0**
0,*
0.*
00*
02*
04*
06*
08*
0:*
0<*
0>*
0@*
0B*
0D*
0F*
0H*
0J*
0L*
0N*
0P*
0R*
0T*
0V*
0X*
0Z*
0\*
0^*
0`*
0b*
0d*
0f*
0h*
0j*
0l*
0n*
0p*
0r*
0t*
0v*
0x*
0z*
0|*
0~*
0"+
0$+
0&+
0(+
xU+
xT+
xS+
xR+
xQ+
xP+
xO+
xN+
xM+
xL+
xK+
xJ+
xI+
xH+
xG+
xF+
0e+
xd+
xc+
xb+
xa+
x`+
x_+
x^+
x]+
x\+
x[+
xZ+
xY+
xX+
xW+
xV+
0u+
1t+
0s+
0r+
0q+
0p+
0o+
0n+
0m+
0l+
0k+
0j+
0i+
0h+
0g+
0f+
x',
x&,
x%,
x$,
x#,
x",
x!,
x~+
x}+
x|+
x{+
xz+
xy+
xx+
xw+
xv+
07,
06,
05,
04,
03,
02,
01,
00,
0/,
0.,
0-,
0,,
0+,
0*,
0),
0(,
x8,
x9,
x:,
x<,
x=,
0O,
0P,
0Q,
0R,
0S,
0c,
1b,
0a,
0`,
0_,
0^,
0],
0\,
0[,
0Z,
0Y,
0X,
0W,
0V,
0U,
0T,
0s,
1r,
0q,
0p,
0o,
0n,
0m,
0l,
0k,
0j,
0i,
0h,
0g,
0f,
0e,
0d,
0w,
1v,
0u,
0t,
0{,
0z,
0y,
0x,
0"-
0!-
0~,
0},
0|,
0&-
0%-
0$-
0#-
0*-
0)-
0(-
0'-
0/-
0.-
0--
0,-
0+-
03-
02-
01-
00-
07-
06-
05-
04-
0<-
0;-
0:-
09-
08-
0@-
0?-
0>-
0=-
0D-
0C-
0B-
0A-
0I-
0H-
0G-
0F-
0E-
xK-
xL-
xM-
xN-
0O-
0_-
x^-
x]-
x\-
x[-
xZ-
xY-
xX-
xW-
xV-
xU-
xT-
xS-
xR-
xQ-
xP-
0o-
xn-
xm-
xl-
xk-
xj-
xi-
xh-
xg-
xf-
xe-
xd-
xc-
xb-
xa-
x`-
0s-
xr-
xq-
xp-
0w-
xv-
0u-
0t-
0|-
0{-
xz-
xy-
xx-
x".
x!.
x~-
x}-
0&.
0%.
0$.
0#.
x+.
x*.
x).
x(.
x'.
x/.
x..
x-.
x,.
03.
02.
01.
00.
x8.
x7.
x6.
x5.
x4.
x<.
x;.
x:.
x9.
0@.
0?.
0>.
0=.
xE.
xD.
xC.
xB.
xA.
0G.
0H.
0I.
0J.
0K.
0[.
0Z.
0Y.
0X.
0W.
0V.
0U.
0T.
0S.
0R.
0Q.
0P.
0O.
0N.
0M.
0L.
0k.
0j.
0i.
0h.
0g.
0f.
0e.
0d.
0c.
0b.
0a.
0`.
0_.
0^.
0].
0\.
0o.
0n.
0m.
0l.
0s.
0r.
0q.
0p.
0x.
0w.
0v.
0u.
0t.
0|.
0{.
0z.
0y.
0"/
0!/
0~.
0}.
0'/
0&/
0%/
0$/
0#/
0+/
0*/
0)/
0(/
0//
0./
0-/
0,/
04/
03/
02/
01/
00/
08/
07/
06/
05/
0</
0;/
0:/
09/
0A/
0@/
0?/
0>/
0=/
xV/
xU/
xT/
xS/
xR/
xQ/
xP/
xO/
xN/
xM/
xL/
xK/
xJ/
xI/
xH/
xG/
xf/
xe/
xd/
xc/
xb/
xa/
x`/
x_/
x^/
x]/
x\/
x[/
xZ/
xY/
xX/
xW/
xv/
xu/
xt/
xs/
xr/
xq/
xp/
xo/
xn/
xm/
xl/
xk/
xj/
xi/
xh/
xg/
x(0
x'0
x&0
x%0
x$0
x#0
x"0
x!0
x~/
x}/
x|/
x{/
xz/
xy/
xx/
xw/
x80
x70
x60
x50
x40
x30
x20
x10
x00
x/0
x.0
x-0
x,0
x+0
x*0
x)0
x90
0:0
0A0
x@0
x?0
x>0
xE0
xD0
xC0
xB0
xI0
xH0
xG0
xF0
xM0
xL0
xK0
xJ0
0Q0
0P0
0O0
0N0
xU0
xT0
xS0
xR0
0Y0
0X0
0W0
0V0
0^0
x]0
x\0
x[0
0b0
0a0
0`0
0_0
0g0
0f0
0e0
0d0
0c0
xl0
xk0
xj0
xi0
0p0
0o0
0n0
0m0
0u0
0t0
0s0
0r0
0q0
xz0
xy0
xx0
xw0
0~0
0}0
0|0
0{0
0%1
0$1
0#1
0"1
0!1
x*1
x)1
x(1
x'1
0.1
0-1
0,1
0+1
031
021
011
001
0/1
041
051
061
x71
081
0H1
xG1
xF1
xE1
xD1
xC1
xB1
xA1
x@1
x?1
x>1
x=1
x<1
x;1
x:1
x91
0X1
xW1
xV1
xU1
xT1
xS1
xR1
xQ1
xP1
xO1
xN1
xM1
xL1
xK1
xJ1
xI1
0\1
x[1
xZ1
xY1
0`1
0_1
0^1
0]1
0e1
0d1
0c1
0b1
0a1
xi1
xh1
xg1
xf1
0m1
0l1
0k1
0j1
0r1
0q1
0p1
0o1
0n1
xv1
xu1
xt1
xs1
0z1
0y1
0x1
0w1
0!2
0~1
0}1
0|1
0{1
x%2
x$2
x#2
x"2
0)2
0(2
0'2
0&2
0.2
0-2
0,2
0+2
0*2
0@2
0A2
0B2
xC2
0D2
0T2
xS2
xR2
xQ2
xP2
xO2
xN2
xM2
xL2
xK2
xJ2
xI2
xH2
xG2
xF2
xE2
0d2
xc2
xb2
xa2
x`2
x_2
x^2
x]2
x\2
x[2
xZ2
xY2
xX2
xW2
xV2
xU2
0h2
xg2
xf2
xe2
0l2
0k2
0j2
0i2
0q2
0p2
0o2
0n2
0m2
xu2
xt2
xs2
xr2
0y2
0x2
0w2
0v2
0~2
0}2
0|2
0{2
0z2
x$3
x#3
x"3
x!3
0(3
0'3
0&3
0%3
0-3
0,3
0+3
0*3
0)3
x13
x03
x/3
x.3
053
043
033
023
0:3
093
083
073
063
0B3
0A3
0@3
0?3
0>3
0=3
0<3
0;3
0J3
0I3
0H3
0G3
0F3
0E3
0D3
0C3
0R3
xQ3
xP3
xO3
xN3
xM3
xL3
xK3
xZ3
xY3
xX3
xW3
xV3
xU3
xT3
xS3
0c3
0b3
0a3
0`3
0_3
0^3
0]3
0\3
0[3
xl3
xk3
xj3
xi3
xh3
xg3
xf3
xe3
xd3
0m3
xn3
0o3
0p3
0q3
0u3
0t3
0s3
0r3
xy3
0x3
0w3
0v3
x+4
x*4
x)4
x(4
x'4
x&4
x%4
x$4
x#4
0"4
0!4
0~3
z}3
z|3
z{3
zz3
004
0/4
0.4
0-4
044
034
024
014
094
084
074
064
054
0=4
0<4
0;4
0:4
0A4
0@4
0?4
0>4
0F4
0E4
0D4
0C4
0B4
xK4
xJ4
xI4
xH4
0O4
xN4
xM4
xL4
0T4
0S4
xR4
xQ4
xP4
xX4
xW4
xV4
xU4
x\4
x[4
xZ4
xY4
xa4
x`4
x_4
x^4
x]4
xf4
xe4
xd4
xc4
0j4
0i4
0h4
0g4
0o4
0n4
0m4
0l4
0k4
xs4
xr4
xq4
xp4
0w4
0v4
0u4
0t4
0|4
0{4
0z4
0y4
0x4
x"5
0!5
0~4
0}4
0&5
0%5
0$5
0#5
0+5
0*5
0)5
0(5
0'5
0/5
0"!
1!!
145
xE/
xD/
xC/
xB/
0E+
0D+
0C+
0B+
0A+
0@+
0?+
0>+
0=+
0<+
0;+
0:+
09+
08+
07+
06+
x5+
x4+
x3+
x2+
x1+
x0+
x/+
x.+
x-+
x,+
x++
x*+
1!$
1}#
0|#
1{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0s$
0r$
1%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0.%
0-%
1>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0G%
0F%
0V%
0U%
0T%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0J%
0I%
0H%
0F.
0J-
0N,
0M,
1L,
0K,
0J,
0I,
0H,
0G,
0F,
0E,
0D,
0C,
0B,
0A,
0@,
0?,
0>,
0?2
0>2
0=2
0<2
0;2
0:2
092
082
072
062
052
042
032
022
012
002
0/2
0&1
0v0
0h0
0Z0
0b4
0G4
0,4
$end
#50
0}
0!!
#100
1}
1!!
b10 z
#150
0}
0!!
#200
1}
1!!
b11 z
#201
1~
1"!
045
0!$
0}#
#250
0}
0!!
#300
1}
1!!
1#&
b100 z
b1 y
1"&
1`$
1%"
1N#
1Z.
1n.
1j.
16,
13!
x_1
xa0
1=2
1A3
xe0
xd0
xc1
xb1
xa1
xc0
xk2
1/4
xo2
xn2
xQ0
x41
xr1
xq1
xp1
xo1
xm2
1b3
xn1
x51
x@2
x~2
x}2
x|2
x{2
x!2
x~1
x}1
x|1
x{1
xi4
xz2
xA2
xm4
xl4
x61
x.2
x-2
x,2
x+2
x-3
x,3
x+3
x*3
xk4
x)3
x*2
x:0
xB2
xo3
x|4
x{4
xz4
xy4
x:3
x93
x83
x73
x63
xx4
xp3
x+5
x*5
x"4
b10 $!
1/
1D+
1y#
0n.
1r.
0v,
1z,
1~,
1v.
0j.
1i.
0r,
1q,
0t+
1s+
06,
15,
0v-
xu-
0l"
1k"
0z-
0W!
1L!
0?
14
1H!
1e1
1X1
1&#
1H1
1\1
1L
1d1
0X1
b0 ["
0>#
0F#
0&#
0L
#350
0}
0!!
#400
1}
1!!
b101 z
b10 y
b100 $!
0/
1.
0D+
1C+
0y#
1x#
1n.
1m.
0r.
1v,
1u,
0z,
0~,
0v.
1j.
1r,
1t+
16,
xv-
1l"
xz-
1X!
0P!
1O!
0L!
1@
08
17
04
0H!
0e1
0d1
1X1
0.#
0H1
0\1
0T
0X1
b10 7"
b1 ["
1?#
1G#
1/#
1U
0l!
1k!
0t!
1s!
0E
1D
b100 \%
b100 X%
b100000000000000 ]%
b100000000000000 Y%
b100 +%
b100 '%
b100000000000000 ,%
b100000000000000 (%
00$
1/$
0P$
1O$
0`$
0%"
0N#
0Z.
0n.
0j.
06,
03!
0_1
0a0
0=2
0A3
0e0
0d0
0c1
0b1
0a1
0c0
0k2
0/4
0o2
0n2
0Q0
041
0r1
0q1
0p1
0o1
0m2
0b3
0n1
051
0@2
0~2
0}2
0|2
0{2
0!2
0~1
0}1
0|1
0{1
0i4
0z2
0A2
0m4
0l4
061
0.2
0-2
0,2
0+2
0-3
0,3
0+3
0*3
0k4
0)3
0*2
0B2
0o3
0|4
0{4
0z4
0y4
0:3
093
083
073
063
0x4
0p3
0:0
0+5
0*5
0"4
#450
0}
0!!
#500
1}
1!!
1A&
b110 z
b11 y
1@&
1a$
1&"
1O#
1[.
1o.
1k.
17,
14!
1\1
1^0
1B3
1X1
1A0
104
1c3
xj4
xn4
xm4
xl4
xk4
xo3
x|4
x{4
xz4
xy4
xx4
xp3
x+5
x*5
x"4
1(0
1V/
b110 $!
1/
1D+
1y#
1n.
0v,
1z,
1~,
1},
1j.
0r,
0q,
1p,
0t+
0s+
1r+
16,
0v-
0u-
xt-
0l"
0k"
1j"
0y-
0z-
0X!
1L!
0@
14
1H!
1e1
1d1
xc1
xb1
xa1
0X1
1'#
1H1
x41
xr1
xq1
xp1
xo1
0\1
1`1
1M
xn1
x51
x!2
x~1
x}1
x|1
x{1
1X1
x61
x.2
x-2
x,2
x+2
x*2
x:0
b0 ["
0?#
0G#
0'#
0M
#550
0}
0!!
#600
1}
1!!
b111 z
b100 y
b1000 $!
0/
0.
1-
0D+
0C+
1B+
0y#
0x#
1w#
0n.
0m.
1l.
1v,
0u,
1t,
0z,
0~,
0},
0j.
0i.
1h.
1r,
1t+
06,
05,
14,
xv-
1l"
xz-
xy-
1V!
1N!
0L!
1>
16
04
0H!
0e1
0X1
0/#
0H1
1\1
0`1
0U
0d1
0c1
0b1
0a1
1X1
041
0r1
0q1
0p1
0o1
0n1
051
0!2
0~1
0}1
0|1
0{1
061
0.2
0-2
0,2
0+2
0*2
0:0
b110 7"
b100 ["
1=#
1E#
1-#
1S
1j!
1r!
1C
b1000000 \%
b10000000000 ]%
b1000000 +%
b10000000000 ,%
0/$
1+$
0O$
1K$
0a$
0&"
0O#
0[.
0o.
0k.
07,
04!
0\1
0^0
0B3
0X1
0A0
004
0c3
0j4
0n4
0m4
0l4
0k4
0o3
0|4
0{4
0z4
0y4
0x4
0p3
0+5
0*5
0"4
x(0
xV/
#650
0}
0!!
#700
1}
1!!
1g'
b1000 z
b101 y
1f'
1_$
1$"
1M#
1Y.
1m.
1i.
15,
12!
x^1
x`0
1<2
1@3
xd0
xb1
xa1
xc0
xj2
1.4
xn2
xQ0
x41
xr1
xq1
xp1
xo1
xm2
1a3
xn1
x51
x@2
x~2
x}2
x|2
x{2
x!2
x~1
x}1
x|1
x{1
xh4
xz2
xA2
xl4
x61
x.2
x-2
x,2
x+2
x-3
x,3
x+3
x*3
xk4
x)3
x*2
x:0
xB2
xo3
x|4
x{4
xz4
xy4
x:3
x93
x83
x73
x63
xx4
xp3
x+5
x*5
x"4
b1010 $!
1/
1D+
1y#
1n.
0v,
1z,
1~,
1j.
0r,
1q,
0t+
1s+
16,
0v-
xu-
0l"
1k"
0z-
0V!
1L!
0>
14
1H!
1e1
1X1
1%#
1H1
1\1
1K
1d1
xc1
0X1
b0 ["
0=#
0E#
0%#
0K
#750
0}
0!!
#800
1}
1!!
b1001 z
b110 y
b1100 $!
0/
1.
0D+
1C+
0y#
1x#
0n.
0m.
1q.
1v,
1u,
0z,
0~,
1u.
1t.
0j.
0i.
0h.
1r,
1G.
1'/
1g.
1t+
06,
05,
04,
xv-
1l"
13,
xz-
1W!
1T!
1P!
0O!
0N!
0K!
0I!
1?
1<
18
07
06
03
01
0G!
0E!
0T#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xD!
xl!
xk!
xj!
xi!
x^0
xH1
xT2
xR3
xA0
x\1
xh2
xO4
xS4
xd1
xX1
xd2
b1 7"
b1 8"
b10 9"
b10010 ["
1>#
1;#
1F#
1C#
0p!
1o!
0n!
0m!
1l!
0k!
0j!
0i!
1t!
0s!
0r!
1E
0D
0C
b100 \%
b100000000000000 ]%
b10 \%
b10 X%
b1000000000000000 ]%
b1000000000000000 Y%
b100 +%
b100000000000000 ,%
b10 +%
b10 '%
b1000000000000000 ,%
b1000000000000000 (%
b0 C%
b0 ?%
b100 D%
b100 @%
b100000000000000 E%
b100000000000000 A%
0A$
0@$
1?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
10$
0+$
1P$
0K$
1`$
0_$
1q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
16"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
1%"
0$"
1N#
0M#
1Z.
0Y.
1w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
1n.
1m.
0q.
0u.
0t.
1j.
1i.
1h.
0G.
0'/
0g.
16,
15,
14,
03,
13!
02!
1D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
071
x_1
0^1
1=2
0<2
1^0
1]0
0\0
0[0
0`0
0l0
0k0
0j0
0i0
0z0
0y0
0x0
0w0
0*1
0)1
0(1
0'1
0Z3
0Y3
0X3
0W3
0V3
0U3
0T3
0S3
0H1
1G1
1F1
1E1
1D1
1C1
1B1
1A1
1@1
1?1
1>1
1=1
1<1
1;1
1:1
191
1T2
0S2
0R2
0Q2
0P2
0O2
0N2
0M2
0L2
0K2
0J2
0I2
0H2
0G2
0F2
0E2
1R3
0Q3
0P3
0O3
0N3
0M3
0L3
0K3
1A3
0@3
0d0
0c0
1A0
1@0
0?0
0>0
0E0
0D0
0C0
0B0
0I0
0H0
0G0
0F0
0M0
0L0
0K0
0J0
0\1
0[1
1Z1
1Y1
1_1
1i1
1h1
1g1
1f1
1v1
1u1
1t1
1s1
1%2
1$2
1#2
1"2
1h2
1g2
0f2
0e2
0j2
0u2
0t2
0s2
0r2
0$3
0#3
0"3
0!3
013
003
0/3
0.3
1K4
0J4
0I4
0H4
0O4
0N4
0M4
0L4
0X4
0W4
0V4
0U4
0\4
0[4
0Z4
0Y4
1/4
0.4
0^4
0_4
0`4
0Q4
0R4
0S4
093
083
073
0,3
0+3
0*3
0}2
0|2
0{2
0n2
1c1
1b1
0d1
0R0
0S0
0T0
0U0
0Q0
1a1
0m2
0P4
0]4
063
0)3
0z2
1X1
0W1
0V1
0U1
1d2
1c2
0b2
0a2
0_2
0^2
0]2
0[2
0Z2
0Y2
0W2
0V2
0U2
1l3
0k3
0j3
0i3
0g3
0f3
0e3
1b3
0a3
0C2
0A2
0B2
0d3
0n3
0@2
141
1r1
1q1
1p1
1o1
0~2
0a4
0:3
0-3
1n1
0\2
0X2
0h3
0`2
0T1
0S1
0R1
0Q1
0y3
0r4
0q4
0p4
1f4
1e4
0d4
0c4
0h4
0l4
0z4
0y4
151
1!2
1~1
1}1
1|1
0k4
0x4
1{1
0P1
0O1
0N1
0M1
0s4
0"5
0%4
0$4
1+4
1*4
0)4
0(4
0*5
0{4
161
0p3
0o3
0|4
0+5
1.2
1-2
1,2
1+2
1*2
0L1
0K1
0J1
0I1
0'4
0&4
0#4
0"4
090
1f/
1e/
0d/
0c/
0b/
0a/
0`/
0_/
0^/
0]/
0\/
0[/
0Z/
0Y/
0X/
0W/
180
170
060
050
040
030
020
010
000
0/0
0.0
0-0
0,0
0+0
0*0
0)0
0z/
0y/
0x/
0w/
0~/
0}/
0|/
0{/
0$0
0#0
0"0
0!0
1(0
1'0
0&0
0%0
1V/
0U/
0T/
0S/
0R/
0Q/
0P/
0O/
0N/
0M/
0L/
0K/
0J/
0I/
0H/
0G/
0=0
0<0
b1 F/
1h!
0g!
0f!
0e!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
1/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
1g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
1U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0Q#
0R#
09,
0:,
0;0
0P#
08,
#850
0}
0!!
#900
1}
1!!
0#&
1!&
b1010 z
b111 y
0"&
1~%
1a$
0`$
1&"
0%"
1O#
0N#
1[.
0Z.
1o.
0n.
1k.
0j.
17,
06,
14!
03!
1\1
1[1
0_1
0^0
0]0
1b0
0=2
1B3
0A3
1f0
1d1
0X1
0A0
0g2
104
0/4
0c2
1c3
0b3
0f4
0e4
1j4
1n4
0+4
0f/
070
0(0
0V/
b0 F/
0h!
0/#
0g
0U
1;0
1P#
18,
b1110 $!
1/
1D+
1y#
1n.
0v,
1z,
1~,
1},
1|,
1j.
0r,
0q,
0p,
1O,
1/-
1o,
0t+
0s+
0r+
16,
0v-
0u-
0t-
0l"
0k"
0j"
1q+
0y-
0z-
0x-
x&.
1i"
0K-
0+.
0W!
0T!
1N!
0L!
1K!
1J!
1I!
0?
0<
16
04
13
12
11
0H!
1G!
1F!
1E!
0U#
1T#
0e1
0d1
0c1
0b1
0a1
0A
1X1
1W1
1V1
1U1
1+#
1H1
0G1
0F1
0E1
0D1
0C1
0B1
0A1
0@1
0?1
0>1
0=1
0<1
0;1
0:1
091
041
0r1
0q1
0p1
0o1
0n1
1T1
1S1
1R1
1Q1
0\1
0[1
0Z1
0Y1
1`1
0i1
0h1
0g1
0f1
0v1
0u1
0t1
0s1
0%2
0$2
0#2
0"2
1Q
0-2
0,2
0+2
0~1
0}1
0|1
1d1
051
0!2
0*2
0{1
0X1
0V1
0U1
0T1
0S1
0R1
0Q1
1L1
061
0:0
0.2
0L1
1U/
0D!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
1^0
x]0
x\0
x[0
0b0
xl0
xk0
xj0
xi0
xz0
xy0
xx0
xw0
x*1
x)1
x(1
x'1
xZ3
xY3
xX3
xW3
xV3
xU3
xT3
xS3
0H1
xG1
xF1
xE1
xD1
xC1
xB1
xA1
x@1
x?1
x>1
x=1
x<1
x;1
x:1
x91
0T2
xS2
xR2
xQ2
xP2
xO2
xN2
xM2
xL2
xK2
xJ2
xI2
xH2
xG2
xF2
xE2
0R3
xQ3
xP3
xO3
xN3
xM3
xL3
xK3
0f0
1A0
x@0
x?0
x>0
xE0
xD0
xC0
xB0
xI0
xH0
xG0
xF0
xM0
xL0
xK0
xJ0
1\1
x[1
xZ1
xY1
0`1
xi1
xh1
xg1
xf1
xv1
xu1
xt1
xs1
x%2
x$2
x#2
x"2
0h2
xg2
xf2
xe2
xu2
xt2
xs2
xr2
x$3
x#3
x"3
x!3
x13
x03
x/3
x.3
xK4
xJ4
xI4
xH4
xN4
xM4
xL4
xX4
xW4
xV4
xU4
x\4
x[4
xZ4
xY4
x`4
x_4
x^4
xR4
xQ4
0d1
xR0
xS0
xT0
xU0
xP4
x]4
1X1
xW1
xV1
xU1
xT1
xS1
xR1
xQ1
xP1
xO1
xN1
xM1
xL1
xK1
xJ1
xI1
0d2
xc2
xb2
xa2
x`2
x_2
x^2
x]2
x\2
x[2
xZ2
xY2
xX2
xW2
xV2
xU2
xl3
xk3
xj3
xi3
xh3
xg3
xf3
xe3
xC2
x71
xd3
xn3
xa4
xy3
xf4
xe4
xd4
xc4
xj4
xs4
xr4
xq4
xp4
xn4
xl4
xm4
xk4
x"5
x+4
x*4
x)4
x(4
x'4
x&4
x%4
x$4
xo3
x|4
x{4
xz4
xy4
x#4
xx4
xp3
x+5
x*5
x"4
x90
xf/
xe/
xd/
xc/
xb/
xa/
x`/
x_/
x^/
x]/
x\/
x[/
xZ/
xY/
xX/
xW/
x80
x70
x60
x50
x40
x30
x20
x10
x00
x/0
x.0
x-0
x,0
x+0
x*0
x)0
1V/
xU/
xT/
xS/
xR/
xQ/
xP/
xO/
xN/
xM/
xL/
xK/
xJ/
xI/
xH/
xG/
xz/
xy/
xx/
xw/
x~/
x}/
x|/
x{/
x$0
x#0
x"0
x!0
1(0
x'0
x&0
x%0
b101 7"
b0 9"
b0 ["
b0 8"
bx1 F/
1h!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
0>#
0;#
0F#
0C#
1g
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
0o!
0l!
1r!
1C
b100000 \%
b100000000000 ]%
b1 *%
b1 &%
b1 +%
b1 '%
b1 ,%
b1 (%
b1 C%
b1 ?%
b1 D%
b1 @%
b1 E%
b1 A%
1A$
0?$
11$
00$
0P$
1L$
0a$
0q$
06"
0&"
0O#
0[.
0w
0o.
0k.
07,
04!
0\1
0^0
0B3
0X1
0A0
004
0c3
0j4
0n4
0m4
0l4
0k4
0o3
0|4
0{4
0z4
0y4
0x4
0p3
0+5
0*5
0"4
x(0
xV/
bx F/
xh!
xg
#950
0}
0!!
#1000
1}
1!!
1K'
b1011 z
b1000 y
1J'
b10000 $!
0/
0.
0-
1,
0D+
0C+
0B+
1A+
0y#
0x#
0w#
1v#
0n.
0m.
0l.
1v,
0u,
0t,
0z,
1|.
1&-
1.-
0~,
0},
0|,
0j.
0i.
0h.
1r,
1g.
0o,
1n,
0O,
0/-
0.-
1o,
0n,
1t+
0q+
1p+
06,
05,
04,
13,
xv-
0&.
x%.
1l"
0i"
1h"
1q+
0p+
0*.
xz-
xy-
xx-
1.#
0+#
1*#
x&.
0%.
1i"
0h"
x*.
xK-
x+.
1+#
0*#
1T
0Q
1P
1Q
0P
1W!
0P!
1O!
0N!
0K!
1?
08
17
06
03
0G!
0T#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
0]0
0\0
0[0
0l0
0k0
0j0
0i0
0z0
0y0
0x0
0w0
0*1
0)1
0(1
0'1
0Z3
0Y3
0X3
0W3
0V3
0U3
0T3
0S3
0G1
0F1
0E1
0D1
0C1
0B1
0A1
0@1
0?1
0>1
0=1
0<1
0;1
0:1
091
0S2
0R2
0Q2
0P2
0O2
0N2
0M2
0L2
0K2
0J2
0I2
0H2
0G2
0F2
0E2
0Q3
0P3
0O3
0N3
0M3
0L3
0K3
0@0
0?0
0>0
0E0
0D0
0C0
0B0
0I0
0H0
0G0
0F0
0M0
0L0
0K0
0J0
0[1
0Z1
0Y1
0i1
0h1
0g1
0f1
0v1
0u1
0t1
0s1
0%2
0$2
0#2
0"2
0g2
0f2
0e2
0u2
0t2
0s2
0r2
0$3
0#3
0"3
0!3
013
003
0/3
0.3
0K4
0J4
0I4
0H4
0N4
0M4
0L4
0X4
0W4
0V4
0U4
0\4
0[4
0Z4
0Y4
0^4
0_4
0`4
0Q4
0R4
0R0
0S0
0T0
0U0
0P4
0]4
0W1
0V1
0U1
0T1
0S1
0R1
0Q1
0P1
0O1
0N1
0M1
0L1
0K1
0J1
0I1
0c2
0b2
0a2
0`2
0_2
0^2
0]2
0\2
0[2
0Z2
0Y2
0X2
0W2
0V2
0U2
0l3
0k3
0j3
0i3
0g3
0f3
0e3
0C2
071
0d3
0n3
0a4
0h3
0y3
0f4
0e4
0d4
0c4
0r4
0q4
0p4
0s4
0"5
0+4
0*4
0)4
0(4
0&4
0%4
0$4
0'4
0#4
090
0f/
0e/
0d/
0c/
0b/
0a/
0`/
0_/
0^/
0]/
0\/
0[/
0Z/
0Y/
0X/
0W/
080
070
060
050
040
030
020
010
000
0/0
0.0
0-0
0,0
0+0
0*0
0)0
0V/
0U/
0T/
0S/
0R/
0Q/
0P/
0O/
0N/
0M/
0L/
0K/
0J/
0I/
0H/
0G/
0z/
0y/
0x/
0w/
0~/
0}/
0|/
0{/
0$0
0#0
0"0
0!0
0(0
0'0
0&0
0%0
b1 ]"
b10 \"
b10 9"
b10 ["
b10 7"
b0 F/
0h!
0g!
0f!
0e!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
1>#
1F#
05+
14+
03+
02+
01+
00+
0/+
0.+
0-+
0U+
1T+
0S+
0R+
0Q+
0P+
0O+
0N+
0M+
0L+
0K+
0J+
0I+
0H+
0G+
0F+
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0d+
1c+
0b+
0a+
0`+
0_+
0^+
0]+
0\+
0[+
0Z+
0Y+
0X+
0W+
0V+
0^-
1]-
0\-
0[-
0Z-
0Y-
0X-
0W-
0V-
0U-
0T-
0S-
0R-
0Q-
0P-
1r-
1q-
0p-
0v-
1".
0!.
0~-
0}-
0&.
0/.
0..
0-.
0,.
0<.
0;.
0:.
09.
0D.
0C.
0B.
07.
06.
05.
0).
0(.
0z-
0y-
0x-
0'.
0A.
04.
1n-
1m-
0l-
0i-
0h-
0f-
0e-
0d-
0b-
0a-
0`-
0N-
0M-
0=,
0L-
0K-
0+.
0*.
08.
0E.
0<,
0c-
0g-
1k-
0j-
0',
1&,
1%,
0$,
0!,
0~+
0|+
0{+
0z+
0x+
0w+
0v+
0m"
1l"
0j"
0g"
0f"
0d"
0c"
0b"
0`"
0_"
0^"
1#,
0",
0}+
0y+
1i"
0h"
0e"
0a"
1o!
0t!
1s!
0r!
1,+
0++
0*+
0E
1D
0C
1;,
b10 \%
b1000000000000000 ]%
b100 \%
b100 X%
b100000000000000 ]%
b100000000000000 Y%
b0 C%
b0 ?%
b100 D%
b100 @%
b100000000000000 E%
b100000000000000 A%
0A$
1?$
1O$
0L$
1k"
1q$
16"
1w
1D!
1^0
1H1
1T2
1R3
1A0
1\1
1h2
1K4
1X1
1d2
1l3
1f4
1+4
1f/
180
1V/
1(0
b1 F/
1h!
1/#
1g
1U
#1050
0}
0!!
#1100
1}
1!!
b1100 z
b1001 y
b10110 $!
1/
1.
1D+
1C+
1y#
1x#
1n.
1m.
0v,
1u,
1z,
1~,
1},
1j.
1i.
0r,
1p,
0t+
1r+
16,
15,
0r-
1p-
0n-
1l-
0&,
1$,
0l"
1j"
1S!
1R!
0O!
1N!
0J!
0I!
1;
1:
07
16
02
01
0F!
0E!
1U#
0k"
1A
0;0
b100 7"
b110 8"
b1100010 \"
b1100010 ["
b10 ]"
1:#
19#
1B#
1A#
10+
1/+
1P+
1O+
1_+
1^+
1Y-
1X-
1~-
1}-
1i-
1h-
1!,
1~+
0P#
0,+
1++
1k!
1j!
0s!
1r!
0D
1C
08,
0;,
b1000000 \%
b10000000000 ]%
b1 W%
b10000 \%
b1 X%
b1000000000000 ]%
b1 Y%
b0 *%
b10000 +%
b1000000000000 ,%
b0 &%
b1000000 +%
b100 '%
b10000000000 ,%
b100000000000000 (%
1;,
01$
1+$
0O$
1M$
1_$
1$"
1M#
1Y.
0m.
1q.
1u.
0i.
1h.
05,
14,
12!
1Z1
1\0
1<2
1@3
1V1
1?0
1f2
1